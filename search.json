[{"path":"https://modeloriented.github.io/survex/articles/custom-explainers.html","id":"automatic-explainer-creation","dir":"Articles","previous_headings":"","what":"Automatic explainer creation","title":"Creating custom explainers","text":"best case, creating explainer desired model already implemented. means everything can extracted model object (sometimes, need set additional parameters). example, case proportional hazards model survival package: can seen required parameter explain() function proportional hazards model . However, needed set model = TRUE, x = TRUE creating . forget set arguments, error shown.","code":"library(survex) library(survival)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE)  auto_cph_explainer <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!"},{"path":"https://modeloriented.github.io/survex/articles/custom-explainers.html","id":"manual-explainer-creation","dir":"Articles","previous_headings":"","what":"Manual explainer creation","title":"Creating custom explainers","text":"next base case types predictions can made using desired model. possible manually create explainer using explain_survival() function. Let’s look example - set parameters coxph explainer hand:","code":"cph <- coxph(Surv(time, status) ~ ., data=veteran)  # data must not include the target columns veteran_data <- veteran[, -c(3,4)] veteran_y <- Surv(veteran$time, veteran$status)  # set prediction functions of the required format risk_pred <- function(model, newdata) predict(model, newdata, type = \"risk\") surv_pred <- function(model, newdata, times) pec::predictSurvProb(model, newdata, times) chf_pred <- function(model, newdata, times) -log(surv_pred(model, newdata, times))  manual_cph_explainer <- explain_survival(model = cph,                                          data = veteran_data,                                          y = veteran_y,                                          predict_function = risk_pred,                                          predict_survival_function = surv_pred,                                          predict_cumulative_hazard_function = chf_pred,                                          label=\"manual coxph\") #> Preparation of a new explainer is initiated  #>   -> model label       :  manual coxph  #>   -> data              :  137  rows  6  cols  #>   -> target variable   :  137  values ( 128 events and 9 censored )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  risk_pred  #>   -> predict survival function  :  surv_pred  #>   -> predict cumulative hazard function  :  chf_pred  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!"},{"path":"https://modeloriented.github.io/survex/articles/custom-explainers.html","id":"helpful-utility-functions","dir":"Articles","previous_headings":"","what":"Helpful utility functions","title":"Creating custom explainers","text":"Sometimes, survival model provides one type prediction, example, survival function. package provides helpful utilities converting types prediction standardizing explainer creation. example, random survival forest randomForestSRC package provides survival function predictions unique times training data set (predict.rsfrc()$survival). Let’s try create explainer using utility function converting type prediction step function can used prediction time points. predict.rsfrc() returns list times survival function evaluated, provide name list element contains prediction evaluation times. case, prediction function returns matrix, can pass times predictions evaluated eval_times argument. use utility get cumulative hazard predictions (commented code ). Still, demonstrate another function, make use mathematical relationship survival function (\\(\\hat{S}\\)) cumulative hazard function (\\(\\hat{H}\\)), .e., \\(\\hat{H} = \\exp(-\\hat{S})\\). reverse utility (cumulative_hazard_to_survival()) also exists. risk prediction provided model, can use utility sum cumulative hazard function observation achieve risk scores. approach recommended Ishwaran et al. (1) Sonabend et al. (2). Now predictions prepared, can finally create explainer:","code":"surv_pred_rsf <- transform_to_stepfunction(predict,                                            type=\"survival\",                                            prediction_element = \"survival\",                                            times_element = \"time.interest\") # would also work  # chf_pred_rsf <- transform_to_stepfunction(predict, #                                           type=\"chf\", #                                           prediction_element = \"chf\", #                                           times_element = \"time.interest\")  chf_pred_rsf <- function(model, newdata, times) {   survival_to_cumulative_hazard(surv_pred_rsf(model, newdata, times)) } times <- unique(veteran$times) risk_pred_rsf <- risk_from_chf(chf_pred_rsf, times) library(randomForestSRC) #>  #>  randomForestSRC 3.1.1  #>   #>  Type rfsrc.news() to see new features, changes, and bug fixes.  #>  rsf <- rfsrc(Surv(time, status) ~ ., data = veteran)  manual_rsf_explainer <- explain_survival(model = rsf,                                          data = veteran_data,                                          y = veteran_y,                                          predict_function = risk_pred_rsf,                                          predict_survival_function = surv_pred_rsf,                                          predict_cumulative_hazard_function = chf_pred_rsf,                                          label = \"manual rsf\") #> Preparation of a new explainer is initiated  #>   -> model label       :  manual rsf  #>   -> data              :  137  rows  6  cols  #>   -> target variable   :  137  values ( 128 events and 9 censored )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  risk_pred_rsf  #>   -> predict survival function  :  surv_pred_rsf  #>   -> predict cumulative hazard function  :  chf_pred_rsf  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!"},{"path":"https://modeloriented.github.io/survex/articles/custom-explainers.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Creating custom explainers","text":"Hemant Ishwaran, Udaya B. Kogalur, Eugene H. Blackstone, Michael S. Lauer, Random survival forests, Annals Applied Statistics, 2008. Raphael Sonabend, Andreas Bender, Sebastian Vollmer, Avoiding C-hacking evaluating survival distribution predictions discrimination measures, Bioinformatics, 2022.","code":""},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"model-and-explainer-creation","dir":"Articles","previous_headings":"","what":"Model and explainer creation","title":"Package usage","text":"purpose presentation, veteran dataset survival package used. first step creation models used making predictions explainers. important note explain() function able extract data automatically, either set certain parameters creating coxph model provide manually. chose set required parameters. creation explainer random survival forest doesn’t require additional steps.","code":"library(survex) library(survival)  set.seed(123)  vet <- survival::veteran  cph <- coxph(Surv(time, status)~., data = vet, model = TRUE, x = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!  rsf <- randomForestSRC::rfsrc(Surv(time, status)~., data = vet) rsf_exp <- explain(rsf) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!"},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"making-predictions","dir":"Articles","previous_headings":"","what":"Making predictions","title":"Package usage","text":"point onward, operate explainer objects (cph_exp rsf_exp) standardized wrappers models. useful feature explainer ability make predictions (risk scores, well survival cumulative hazard functions) unified way independently underlying model.","code":"predict(cph_exp, veteran[1:2,], output_type=\"risk\") #>         1         2  #> 0.7354128 0.5942155 predict(rsf_exp, veteran[1:2,], output_type=\"risk\") #> [1] 59.97083 43.81380  predict(cph_exp, veteran[1:2,], output_type=\"survival\", times=seq(1, 600, 100)) #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.9959425 0.6869782 0.4288623 0.3064447 0.1871004 0.1302146 #> [2,] 0.9967203 0.7383282 0.5045589 0.3845663 0.2581276 0.1925939 predict(rsf_exp, veteran[1:2,], output_type=\"survival\", times=seq(1, 600, 100)) #>           [,1]      [,2]      [,3]      [,4]      [,5]       [,6] #> [1,] 0.9874942 0.6440157 0.3248874 0.1648385 0.0858866 0.05569097 #> [2,] 0.9908380 0.7835687 0.4285480 0.2619398 0.1496997 0.09270633  predict(cph_exp, veteran[1:2,], output_type=\"chf\", times=seq(1, 600, 100)) #>             [,1]      [,2]      [,3]      [,4]     [,5]     [,6] #> [1,] 0.004065711 0.3754527 0.8466194 1.1827179 1.676110 2.038572 #> [2,] 0.003285105 0.3033668 0.6840708 0.9556392 1.354301 1.647171 predict(rsf_exp, veteran[1:2,], output_type=\"chf\", times=seq(1, 600, 100)) #>             [,1]      [,2]      [,3]     [,4]     [,5]     [,6] #> [1,] 0.012505833 0.4781481 1.1520470 1.785237 2.312916 2.551416 #> [2,] 0.009161967 0.2501205 0.8693828 1.368775 1.908718 2.307685"},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"measuring-performance","dir":"Articles","previous_headings":"","what":"Measuring performance","title":"Package usage","text":"Another helpful thing functionality calculating different metrics models. use model_performance() function. calculates set performance measures can plot next easily compare.  can also plot scalar metrics form bar plots.  comparison, see Random Survival Forest model better Brier score metric (lower better), Cumulative/Dynamic AUC metric (higher better), integrated versions, well consider concordance index. Therefore, better candidate making predictions lacks interpretability compared Proportional Hazards model.","code":"mp_cph <- model_performance(cph_exp) mp_rsf <- model_performance(rsf_exp)  plot(mp_cph, mp_rsf) plot(mp_cph, mp_rsf, metrics_type=\"scalar\")"},{"path":[]},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"variable-importance","dir":"Articles","previous_headings":"Global explanations","what":"Variable importance","title":"Package usage","text":"Next, check variable influences models’ predictions global level. purpose, use model_parts() function. calculates permutational variable importance difference loss function time-dependent (default loss_brier_score()), influence variable can different considered time point.  models, permutation karno variable leads highest increase loss function, second celltype. two variables important models making predictions. can use another loss function ensure observation consistent. Let’s use loss_one_minus_cd_auc(), let’s also change plot type show difference loss function given variable’s permutation loss full model variables. means values y-axis represent change loss function permuting variable.  observe results consistent loss_brier_score(). ’s good news - simple sanity check variables important models.","code":"model_parts_rsf <- model_parts(rsf_exp) model_parts_cph <- model_parts(cph_exp)  plot(model_parts_cph,model_parts_rsf) model_parts_rsf_auc <- model_parts(rsf_exp, loss_function=loss_one_minus_cd_auc, type=\"difference\") model_parts_cph_auc <- model_parts(cph_exp, loss_function=loss_one_minus_cd_auc, type=\"difference\")  # NOTE: this may take a long time, so a progress bar is available. To enable it, use: # progressr::with_progress(model_parts(rsf_exp, loss_function=loss_one_minus_cd_auc, type=\"difference\"))  plot(model_parts_cph_auc,model_parts_rsf_auc)"},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"partial-dependence","dir":"Articles","previous_headings":"Global explanations","what":"Partial dependence","title":"Package usage","text":"next type global explanation package provides partial dependence plots. calculated using model_profile() function. plots show setting one variable different value , average, influence model’s prediction. , extension partial dependence known regression classification tasks, applied survival models extending take time dimension account. Note need set categorical_variables parameter order avoid nonsensical values, treatment value 0.5. factors automatically detected categories, want treat numerical variable categorical one, need set .  plot, see proportional hazards model, prior diagtime variables important. plotted bands thin, almost overlapping, overall prediction similar matter value variables take. hand, karno variable wide band means even small change value causes big difference predicted survival function. can also see lower values indicate lower chance survival (survival function decreases quicker). can also plot information random survival forest. time let’s change way plotting numerical variables, instead values variables represented colors survival function values y-axis, let’s swap .  type plot also gives us valuable insight easy overlook type. example, see sharp drop survival function values around diagtime=25. also observe significant influence karno variable consistent across proportional hazards random survival forest.","code":"model_profile_cph <- model_profile(cph_exp, categorical_variables=c(\"trt\", \"prior\")) plot(model_profile_cph, facet_ncol = 1) #> TableGrob (3 x 1) \"arrange\": 3 grobs #>   z     cells    name                grob #> 1 1 (1-1,1-1) arrange text[GRID.text.571] #> 2 2 (2-2,1-1) arrange text[GRID.text.572] #> 3 3 (3-3,1-1) arrange     gtable[arrange] model_profile_rsf <- model_profile(rsf_exp, categorical_variables=c(\"trt\", \"prior\")) plot(model_profile_rsf, facet_ncol = 1, numerical_plot_type = \"contour\") #> TableGrob (3 x 1) \"arrange\": 3 grobs #>   z     cells    name                grob #> 1 1 (1-1,1-1) arrange text[GRID.text.998] #> 2 2 (2-2,1-1) arrange text[GRID.text.999] #> 3 3 (3-3,1-1) arrange     gtable[arrange]"},{"path":[]},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"local-variable-attributions","dir":"Articles","previous_headings":"Local explanations","what":"Local variable attributions","title":"Package usage","text":"Another kind functionality provided package local explanations. predict_parts() function can used assess importance variables making predictions selected observation. can done two methods, SurvSHAP(t) SurvLIME.","code":""},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"survshapt","dir":"Articles","previous_headings":"Local explanations > Local variable attributions","what":"SurvSHAP(t)","title":"Package usage","text":"SurvSHAP(t) explanations extension SHAP values survival models. show breakdown prediction individual variables.   first plot, see observation 32 veteran data set, value karno variable improves chances survival individual. contrast, value celltype variable decreases . true explained models. second plot, can seen, observation 12, situation flipped, celltype increases chances survival karno decreases . Interestingly, random survival forest, one influential variables diagtime, proportional hazards model almost ignores.","code":"predict_parts_cph_32 <- predict_parts(cph_exp, veteran[32,]) predict_parts_rsf_32 <- predict_parts(rsf_exp, veteran[32,]) plot(predict_parts_cph_32, predict_parts_rsf_32) predict_parts_cph_12 <- predict_parts(cph_exp, veteran[12,]) predict_parts_rsf_12 <- predict_parts(rsf_exp, veteran[12,]) plot(predict_parts_cph_12, predict_parts_rsf_12)"},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"survlime","dir":"Articles","previous_headings":"Local explanations > Local variable attributions","what":"SurvLIME","title":"Package usage","text":"different way attributing variable importance provided SurvLIME method. works finding surrogate proportional hazards model approximates survival model local area around observation interest. Variable importance attributed using coefficients found model.   left part plot shows variables important value increases lowers chances survival, whereas right shows black-box model prediction together one found surrogate model. useful information closer functions , accurate explanation can .","code":"predict_parts_cph_12_lime <- predict_parts(cph_exp, veteran[12,], type=\"survlime\") predict_parts_rsf_12_lime <- predict_parts(rsf_exp, veteran[12,], type=\"survlime\") plot(predict_parts_cph_12_lime, type=\"local_importance\") plot(predict_parts_rsf_12_lime, type=\"local_importance\")"},{"path":"https://modeloriented.github.io/survex/articles/survex-usage.html","id":"ceteris-paribus","dir":"Articles","previous_headings":"Local explanations","what":"Ceteris paribus","title":"Package usage","text":"Another explanation technique provided package ceteris paribus profiles. show prediction changes change value one variable time. can think equivalent partial dependence plots applied single observation. predict_profile() function used make explanations.   plots also give lot valuable insight. example, see prior variable influence predictions much, lines representing survival functions different values almost overlap. also observe celltype values \"small\" \"adeno\", well \"large\" \"squamous\" result almost prediction observation. can seen important variable observation karno, differences survival function greatest, low values indicating lower chances survival. contrast, high values diagtime variable seem indicate lower chances survival.","code":"predict_profile_cph_32 <- predict_profile(cph_exp, veteran[32,], categorical_variables=c(\"trt\", \"prior\")) plot(predict_profile_cph_32, facet_ncol=1) predict_profile_rsf_32 <- predict_profile(rsf_exp, veteran[32,], categorical_variables=c(\"trt\", \"prior\")) plot(predict_profile_rsf_32, facet_ncol=1)"},{"path":"https://modeloriented.github.io/survex/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikołaj Spytek. Author, maintainer. Mateusz Krzyziński. Author. Hubert Baniecki. Author. Przemyslaw Biecek. Author.","code":""},{"path":"https://modeloriented.github.io/survex/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Spytek M, Krzyziński M, Baniecki H, Biecek P (2022). survex: Explainable Machine Learning Survival Analysis. R package version 0.1.1, https://modeloriented.github.io/survex/.","code":"@Manual{,   title = {survex: Explainable Machine Learning in Survival Analysis},   author = {Mikołaj Spytek and Mateusz Krzyziński and Hubert Baniecki and Przemyslaw Biecek},   year = {2022},   note = {R package version 0.1.1},   url = {https://modeloriented.github.io/survex/}, }"},{"path":[]},{"path":"https://modeloriented.github.io/survex/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Explainable Machine Learning in Survival Analysis","text":"Survival analysis task dealing time--event prediction. Aside well-understood models like CPH, many complex models recently emerged, lack interpretability. Due functional type prediction, either form survival function cumulative hazard function, standard model-agnostic explanations applied directly. survex package provides model-agnostic explanations machine learning survival models. based DALEX package. ’re unfamiliar explainable machine learning, consider referring Explanatory Model Analysis book – methods included survex extend described EMA implemented DALEX models functional output. main explain() function uses model data create standardized explainer object, used interface calculating predictions. automate creating explainers following packages: mlr3proba, censored, ranger, randomForestSRC, survival. Raise Issue GitHub find models packages can incorporate explain() interface. Note explainer can created survival model, using explain_survival() function passing model, data, y, predict_survival_function arguments.","code":""},{"path":"https://modeloriented.github.io/survex/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explainable Machine Learning in Survival Analysis","text":"package available CRAN: latest development version can installed GitHub using devtools::install_github():","code":"install.packages(\"survex\") devtools::install_github(\"https://github.com/ModelOriented/survex\")"},{"path":"https://modeloriented.github.io/survex/index.html","id":"simple-demo","dir":"","previous_headings":"","what":"Simple demo","title":"Explainable Machine Learning in Survival Analysis","text":"","code":"library(\"survex\") library(\"survival\") library(\"ranger\")  # create a model model <- ranger(Surv(time, status) ~ ., data = veteran)  # create an explainer explainer <- explain(model,                       data = veteran[, -c(3, 4)],                      y = Surv(veteran$time, veteran$status))  # evaluate the model model_performance(explainer)  # visualize permutation-based feature importance plot(model_parts(explainer))  # explain one prediction with SurvSHAP(t) plot(predict_parts(explainer, veteran[1, -c(3, 4)]))"},{"path":[]},{"path":"https://modeloriented.github.io/survex/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Explainable Machine Learning in Survival Analysis","text":"H. Ishwaran, U. B. Kogalur, E. H. Blackstone, M. S. Lauer. Random survival forests. Annals Applied Statistics, 2008. M. S. Kovalev, L. V. Utkin, E. M. Kasimov. SurvLIME: method explaining machine learning survival models. Knowledge-Based Systems, 2020. R. Sonabend, F. J. Király, . Bender, B. Bischl, M. Lang. mlr3proba: R package machine learning survival analysis. Bioinformatics, 2021. E. Hvitfeldt, H. Frick. censored: ‘parsnip’ Engines Survival Models. CRAN v0.1.0, 2022. M. Krzyziński, M. Spytek, H. Baniecki, P. Biecek. SurvSHAP(t): Time-dependent explanations machine learning survival models. arXiv preprint arXiv:2208.11080, 2022.","code":""},{"path":"https://modeloriented.github.io/survex/reference/brier_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Brier score — brier_score","title":"Calculate Brier score — brier_score","text":"function calculating Brier score survival model.","code":""},{"path":"https://modeloriented.github.io/survex/reference/brier_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Brier score — brier_score","text":"","code":"brier_score(y_true = NULL, risk = NULL, surv = NULL, times = NULL)  loss_brier_score(y_true = NULL, risk = NULL, surv = NULL, times = NULL)"},{"path":"https://modeloriented.github.io/survex/reference/brier_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Brier score — brier_score","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk ignored, left compatibility metrics surv matrix containing predicted survival functions considered observations, row represents single observation, whereas column one time point times vector time points survival function evaluated","code":""},{"path":"https://modeloriented.github.io/survex/reference/brier_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Brier score — brier_score","text":"numeric 0 1, lower scores better (brier score 0.25 represents model returns always returns 0.5 predicted survival function)","code":""},{"path":"https://modeloriented.github.io/survex/reference/brier_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Brier score — brier_score","text":"Brier score used evaluate performance survival model, based squared distance predicted survival function actual event time, weighted account censored observations.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/brier_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Brier score — brier_score","text":"","code":"library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    y <- cph_exp$y times <- cph_exp$times surv <- cph_exp$predict_survival_function(cph, cph_exp$data, times)  brier_score(y, surv = surv, times = times) #>  [1] 0.01450469 0.01450469 0.02131799 0.03395903 0.05085721 0.07237285 #>  [7] 0.08296505 0.08296505 0.08976566 0.10034947 0.10895859 0.11860639 #> [13] 0.11860639 0.12115921 0.12534671 0.12534671 0.12812196 0.12899805 #> [19] 0.12899805 0.12894844 0.13311293 0.13452743 0.13853090 0.14201661 #> [25] 0.14171276 0.15028547 0.15745581 0.15745581 0.15894651 0.15887866 #> [31] 0.16421655 0.16678636 0.16752588 0.16054595 0.15386626 0.15386626 #> [37] 0.15595910 0.15595910 0.15824493 0.16471718 0.16763382 0.16364167 #> [43] 0.16343522 0.16768271 0.15672279 0.15672279 0.15781375 0.15800998 #> [49] 0.15707059 0.15707059 0.15188724 0.15110733 0.15110733 0.15151055 #> [55] 0.15151055 0.15237535 0.15325489 0.15325489 0.16278271 0.16469163 #> [61] 0.16469163 0.16725319 0.16725319 0.17057980 0.16644868 0.16788043 #> [67] 0.16572450 0.16628150 0.16073207 0.15935967 0.15352345 0.14851016 #> [73] 0.14642744 0.14642744 0.14359704 0.14083776 0.13666323 0.13547324 #> [79] 0.12885560 0.12559400 0.11816123 0.11207367 0.10765794 0.09901280 #> [85] 0.09889997 0.09031670 0.07760702 0.07237333 0.06668832 0.05535086 #> [91] 0.04565290 0.04001131 0.02744170 0.01789265 loss_brier_score(y, surv = surv, times = times) #>  [1] 0.01450469 0.01450469 0.02131799 0.03395903 0.05085721 0.07237285 #>  [7] 0.08296505 0.08296505 0.08976566 0.10034947 0.10895859 0.11860639 #> [13] 0.11860639 0.12115921 0.12534671 0.12534671 0.12812196 0.12899805 #> [19] 0.12899805 0.12894844 0.13311293 0.13452743 0.13853090 0.14201661 #> [25] 0.14171276 0.15028547 0.15745581 0.15745581 0.15894651 0.15887866 #> [31] 0.16421655 0.16678636 0.16752588 0.16054595 0.15386626 0.15386626 #> [37] 0.15595910 0.15595910 0.15824493 0.16471718 0.16763382 0.16364167 #> [43] 0.16343522 0.16768271 0.15672279 0.15672279 0.15781375 0.15800998 #> [49] 0.15707059 0.15707059 0.15188724 0.15110733 0.15110733 0.15151055 #> [55] 0.15151055 0.15237535 0.15325489 0.15325489 0.16278271 0.16469163 #> [61] 0.16469163 0.16725319 0.16725319 0.17057980 0.16644868 0.16788043 #> [67] 0.16572450 0.16628150 0.16073207 0.15935967 0.15352345 0.14851016 #> [73] 0.14642744 0.14642744 0.14359704 0.14083776 0.13666323 0.13547324 #> [79] 0.12885560 0.12559400 0.11816123 0.11207367 0.10765794 0.09901280 #> [85] 0.09889997 0.09031670 0.07760702 0.07237333 0.06668832 0.05535086 #> [91] 0.04565290 0.04001131 0.02744170 0.01789265"},{"path":"https://modeloriented.github.io/survex/reference/c_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Harell's Concordance index — c_index","title":"Calculate Harell's Concordance index — c_index","text":"function calculate Harells' concordance index survival model.","code":""},{"path":"https://modeloriented.github.io/survex/reference/c_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Harell's Concordance index — c_index","text":"","code":"c_index(y_true = NULL, risk = NULL, surv = NULL, times = NULL)"},{"path":"https://modeloriented.github.io/survex/reference/c_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Harell's Concordance index — c_index","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk numeric vector risk scores corresponding observation surv ignored, left compatibility metrics times ignored, left compatibility metrics","code":""},{"path":"https://modeloriented.github.io/survex/reference/c_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Harell's Concordance index — c_index","text":"numeric 0 1, higher values indicate better performance","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/c_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Harell's Concordance index — c_index","text":"","code":"# \\donttest{ library(survival) library(survex)  rotterdam <- survival::rotterdam rotterdam$year <- NULL cox_rotterdam_rec <- coxph(Surv(rtime, recur) ~ .,     data = rotterdam,     model = TRUE, x = TRUE, y = TRUE) coxph_explainer <- explain(cox_rotterdam_rec) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  2982  rows  12  cols (  extracted from the model  )  #>   -> target variable   :  2982  values ( 1518 events and 1464 censored ) (  extracted from the model  )  #>   -> times             :  100 unique time points , min = 36 , mean = 2066.1 , max = 5394.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    risk <- coxph_explainer$predict_function(coxph_explainer$model, coxph_explainer$data) c_index(y_true = coxph_explainer$y, risk = risk) #> [1] 0.8633358 # }"},{"path":"https://modeloriented.github.io/survex/reference/cd_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cumulative/Dynamic AUC — cd_auc","title":"Calculate Cumulative/Dynamic AUC — cd_auc","text":"function calculates Cumulative/Dynamic AUC metric survival model.","code":""},{"path":"https://modeloriented.github.io/survex/reference/cd_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cumulative/Dynamic AUC — cd_auc","text":"","code":"cd_auc(y_true = NULL, risk = NULL, surv = NULL, times = NULL)"},{"path":"https://modeloriented.github.io/survex/reference/cd_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cumulative/Dynamic AUC — cd_auc","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk ignored, left compatibility metrics surv matrix containing predicted survival functions considered observations, row represents single observation, whereas column one time point times vector time points survival function evaluated","code":""},{"path":"https://modeloriented.github.io/survex/reference/cd_auc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cumulative/Dynamic AUC — cd_auc","text":"numeric vector length equal length times vector, value (range 0 1) represents AUC metric specific time point, higher values indicating better performance.","code":""},{"path":"https://modeloriented.github.io/survex/reference/cd_auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Cumulative/Dynamic AUC — cd_auc","text":"C/D AUC extension AUC metric known classification models. values represent model's performance specific time points. can integrated considered time point","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/cd_auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cumulative/Dynamic AUC — cd_auc","text":"","code":"library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    y <- cph_exp$y times <- cph_exp$times surv <- cph_exp$predict_survival_function(cph, cph_exp$data, times)  cd_auc(y, surv = surv, times = times) #>  [1] 0.6592593 0.6592593 0.7388060 0.8045455 0.8352713 0.7846667 0.7845528 #>  [8] 0.7845528 0.7398907 0.7411765 0.7506690 0.7516420 0.7516420 0.7628458 #> [15] 0.7982143 0.7982143 0.8151515 0.8333333 0.8333333 0.8487523 0.8407738 #> [22] 0.8512279 0.8333333 0.8296703 0.8358247 0.8165414 0.8059629 0.8059629 #> [29] 0.8084541 0.8184397 0.8031367 0.8021800 0.8027816 0.8158371 0.8392857 #> [36] 0.8392857 0.8405041 0.8405041 0.8363636 0.8230108 0.8174603 0.8264127 #> [43] 0.8299189 0.8191898 0.8432836 0.8432836 0.8410158 0.8375428 0.8326882 #> [50] 0.8326882 0.8454545 0.8485378 0.8485378 0.8465632 0.8465632 0.8353549 #> [57] 0.8340173 0.8340173 0.8107607 0.8033097 0.8033097 0.7910557 0.7910557 #> [64] 0.7805542 0.7888720 0.7824742 0.7830979 0.7721622 0.7830033 0.7801256 #> [71] 0.7919580 0.8023810 0.7876756 0.7876756 0.7870249 0.7799723 0.7825000 #> [78] 0.7750737 0.7739130 0.7701149 0.7818912 0.7875817 0.7852941 0.7775956 #> [85] 0.7572590 0.7816377 0.7849928 0.7763780 0.7673611 0.7846154 0.8689567 #> [92] 0.8545455 0.8233831 0.8740741"},{"path":"https://modeloriented.github.io/survex/reference/cumulative_hazard_to_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Cumulative Hazard to Survival — cumulative_hazard_to_survival","title":"Transform Cumulative Hazard to Survival — cumulative_hazard_to_survival","text":"Helper function transform CHF survival function","code":""},{"path":"https://modeloriented.github.io/survex/reference/cumulative_hazard_to_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Cumulative Hazard to Survival — cumulative_hazard_to_survival","text":"","code":"cumulative_hazard_to_survival(hazard_functions)"},{"path":"https://modeloriented.github.io/survex/reference/cumulative_hazard_to_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Cumulative Hazard to Survival — cumulative_hazard_to_survival","text":"hazard_functions matrix vector, row representing cumulative hazard function","code":""},{"path":"https://modeloriented.github.io/survex/reference/cumulative_hazard_to_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Cumulative Hazard to Survival — cumulative_hazard_to_survival","text":"matrix vector transformed form survival function.","code":""},{"path":"https://modeloriented.github.io/survex/reference/cumulative_hazard_to_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Cumulative Hazard to Survival — cumulative_hazard_to_survival","text":"","code":"library(survex)  vec <- c(1, 2, 3, 4, 5) matr <- matrix(c(1, 2, 3, 2, 4, 6), ncol = 3)  cumulative_hazard_to_survival(vec) #> [1] 0.367879441 0.135335283 0.049787068 0.018315639 0.006737947  cumulative_hazard_to_survival(matr) #>           [,1]       [,2]        [,3] #> [1,] 0.3678794 0.04978707 0.018315639 #> [2,] 0.1353353 0.13533528 0.002478752"},{"path":"https://modeloriented.github.io/survex/reference/explain_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"A model agnostic explainer for survival models — explain","title":"A model agnostic explainer for survival models — explain","text":"Black-box models vastly different structures. explain_survival() returns object can processed creating prediction explanations visualizations.","code":""},{"path":"https://modeloriented.github.io/survex/reference/explain_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A model agnostic explainer for survival models — explain","text":"","code":"explain(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL )  # S3 method for default explain(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL )  explain_survival(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL,   times = NULL,   times_generation = \"quantiles\",   predict_survival_function = NULL,   predict_cumulative_hazard_function = NULL )  # S3 method for coxph explain(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL,   times = NULL,   times_generation = \"quantiles\",   predict_survival_function = NULL,   predict_cumulative_hazard_function = NULL )  # S3 method for ranger explain(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL,   times = NULL,   times_generation = \"quantiles\",   predict_survival_function = NULL,   predict_cumulative_hazard_function = NULL )  # S3 method for rfsrc explain(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL,   times = NULL,   times_generation = \"quantiles\",   predict_survival_function = NULL,   predict_cumulative_hazard_function = NULL )  # S3 method for model_fit explain(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL,   times = NULL,   times_generation = \"quantiles\",   predict_survival_function = NULL,   predict_cumulative_hazard_function = NULL )  # S3 method for LearnerSurv explain(   model,   data = NULL,   y = NULL,   predict_function = NULL,   predict_function_target_column = NULL,   residual_function = NULL,   weights = NULL,   ...,   label = NULL,   verbose = TRUE,   colorize = !isTRUE(getOption(\"knitr.in.progress\")),   model_info = NULL,   type = NULL,   times = NULL,   times_generation = \"quantiles\",   predict_survival_function = NULL,   predict_cumulative_hazard_function = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/explain_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A model agnostic explainer for survival models — explain","text":"model object - survival model explained data data.frame - data used calculate explanations. provided, extracted model possible. contain target columns. NOTE: target variable present data functionality breaks. y survival::Surv object containing event/censoring times statuses corresponding data predict_function function taking 2 arguments - model newdata returning single number observation - risk score. Observations higher score likely observe event sooner. predict_function_target_column unused, left compatibility DALEX residual_function unused, left compatibility DALEX weights unused, left compatibility DALEX ... additional arguments, passed DALEX::explain() label character - name model. Used differentiate visualizations multiple explainers. default extracted 'class' attribute model possible. verbose logical, TRUE (default) diagnostic messages printed colorize logical, TRUE (default) WARNINGS, ERRORS NOTES colorized. work R console. default FALSE knitting TRUE otherwise. model_info named list (package, version, type) containing information model. NULL, survex seek information . type type model, default \"survival\" times numeric, vector times survival function cumulative hazard function evaluated calculations times_generation either \"uniform\" \"quantiles\". Sets way generating vector times based times provided y parameter. \"uniform\" vector contains 101 equally spaced points minimum maximum observed times; \"quantiles\" vector contains 100 points 0th 99th percentiles observed times. Ignored times NULL. predict_survival_function function taking 3 arguments model, newdata times, returning matrix whose row survival function evaluated times one observation newdata predict_cumulative_hazard_function function taking 3 arguments model, newdata times, returning matrix whose row cumulative hazard function evaluated times one observation newdata","code":""},{"path":"https://modeloriented.github.io/survex/reference/explain_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A model agnostic explainer for survival models — explain","text":"list containing following elements: model - explained model. data - dataset used training. y - response observations data. residuals - calculated residuals. predict_function - function may used model predictions, shall return single numerical value observation. residual_function - function returns residuals, shall return single numerical value observation. class - class/classes model. label - label explainer. model_info - named list contating basic information model, like package, version package type. times - vector times, used evaluation survival function cumulative hazard function default predict_survival_function - function used model predictions form survival function predict_cumulative_hazard_function - function used model predictions form cumulative hazard function","code":""},{"path":"https://modeloriented.github.io/survex/reference/explain_survival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A model agnostic explainer for survival models — explain","text":"function can used manually create explainers models covered survex package.","code":""},{"path":"https://modeloriented.github.io/survex/reference/explain_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A model agnostic explainer for survival models — explain","text":"","code":"# \\donttest{ library(survival) library(survex)  cph <- survival::coxph(survival::Surv(time, status) ~ ., data = veteran,                        model = TRUE, x = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    rsf_ranger <- ranger::ranger(survival::Surv(time, status) ~ ., data = veteran,  respect.unordered.factors = TRUE, num.trees = 100, mtry = 3, max.depth = 5) rsf_ranger_exp <- explain(rsf_ranger, data = veteran[, -c(3, 4)],  y = Surv(veteran$time, veteran$status)) #> Preparation of a new explainer is initiated  #>   -> model label       :  ranger (  default  )  #>   -> data              :  137  rows  6  cols  #>   -> target variable   :  137  values ( 128 events and 9 censored )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.ranger()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.ranger()$chf will be used (  default  )  #>   -> model_info        :  package ranger , ver. 0.14.1 , task survival (  default  )  #>   A new explainer has been created!    rsf_src <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) rsf_src_exp <- explain(rsf_src) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    library(censored, quietly = TRUE)  bt <- parsnip::boost_tree() %>%    parsnip::set_engine(\"mboost\") %>%    parsnip::set_mode(\"censored regression\") %>%    generics::fit(survival::Surv(time, status) ~ ., data = veteran) bt_exp <- explain(bt, data = veteran[, -c(3, 4)], y = Surv(veteran$time, veteran$status)) #> Preparation of a new explainer is initiated  #>   -> model label       :  model_fit_blackboost (  default  )  #>   -> data              :  137  rows  6  cols  #>   -> target variable   :  137  values ( 128 events and 9 censored )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.model_fit with type = 'linear_pred' will be used (  default  )  #>   -> predict survival function  :  predict.model_fit with type = 'survival' will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package parsnip , ver. 1.0.1 , task survival (  default  )  #>   A new explainer has been created!   # }"},{"path":"https://modeloriented.github.io/survex/reference/integrated_brier_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate integrated Brier score — integrated_brier_score","title":"Calculate integrated Brier score — integrated_brier_score","text":"function calculates integrated Brier score metric survival model.","code":""},{"path":"https://modeloriented.github.io/survex/reference/integrated_brier_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate integrated Brier score — integrated_brier_score","text":"","code":"integrated_brier_score(   y_true = NULL,   risk = NULL,   surv = NULL,   times = NULL,   brier = NULL )  loss_integrated_brier_score(   y_true = NULL,   risk = NULL,   surv = NULL,   times = NULL,   brier = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/integrated_brier_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate integrated Brier score — integrated_brier_score","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk ignored, left compatibility metrics surv matrix containing predicted survival functions considered observations, row represents single observation, whereas column one time point times vector time points survival function evaluated brier vector containing already calculated Brier score metric time points specified times parameter. provided arguments except times brier ignored","code":""},{"path":"https://modeloriented.github.io/survex/reference/integrated_brier_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate integrated Brier score — integrated_brier_score","text":"numeric 0 1, lower values indicate better performance","code":""},{"path":"https://modeloriented.github.io/survex/reference/integrated_brier_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate integrated Brier score — integrated_brier_score","text":"useful see model performs whole, specific time points, example easier comparison. function allows calculating integral Brier score metric numerically using trapezoid method.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/integrated_brier_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate integrated Brier score — integrated_brier_score","text":"","code":"library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    y <- cph_exp$y times <- cph_exp$times surv <- cph_exp$predict_survival_function(cph, cph_exp$data, times)   # calculating directly integrated_brier_score(y, surv = surv, times = times) #> [1] 0.07182192  # calculating based on given auc vector brier_score <- brier_score(y, surv = surv, times = times) integrated_brier_score(times = times, brier = brier_score) #> [1] 0.07182192"},{"path":"https://modeloriented.github.io/survex/reference/integrated_cd_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate integrated C/D AUC — integrated_cd_auc","title":"Calculate integrated C/D AUC — integrated_cd_auc","text":"function calculates integrated Cumulative/Dynamic AUC metric survival model.","code":""},{"path":"https://modeloriented.github.io/survex/reference/integrated_cd_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate integrated C/D AUC — integrated_cd_auc","text":"","code":"integrated_cd_auc(   y_true = NULL,   risk = NULL,   surv = NULL,   times = NULL,   auc = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/integrated_cd_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate integrated C/D AUC — integrated_cd_auc","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk ignored, left compatibility metrics surv matrix containing predicted survival functions considered observations, row represents single observation, whereas column one time point times vector time points survival function evaluated auc vector containing already calculated AUC metric time points specified times parameter. provided arguments except times auc ignored","code":""},{"path":"https://modeloriented.github.io/survex/reference/integrated_cd_auc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate integrated C/D AUC — integrated_cd_auc","text":"numeric 0 1, higher values indicate better performance","code":""},{"path":"https://modeloriented.github.io/survex/reference/integrated_cd_auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate integrated C/D AUC — integrated_cd_auc","text":"useful see model performs whole, specific time points, example easier comparison. function allows calculating integral C/D AUC metric numerically using trapezoid method.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/integrated_cd_auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate integrated C/D AUC — integrated_cd_auc","text":"","code":"library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    y <- cph_exp$y times <- cph_exp$times surv <- cph_exp$predict_survival_function(cph, cph_exp$data, times)   # calculating directly integrated_cd_auc(y, surv = surv, times = times) #> [1] 0.8216749  # calculating based on given auc vector auc <- cd_auc(y, surv = surv, times = times) integrated_cd_auc(times = times, auc = auc) #> [1] 0.8216749"},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_c_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Concordance index loss — loss_one_minus_c_index","title":"Calculate the Concordance index loss — loss_one_minus_c_index","text":"function subtracts C-index metric one obtain loss function whose lower values indicate better model performance (useful permutational feature importance)","code":""},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_c_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Concordance index loss — loss_one_minus_c_index","text":"","code":"loss_one_minus_c_index(y_true = NULL, risk = NULL, surv = NULL, times = NULL)"},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_c_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Concordance index loss — loss_one_minus_c_index","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk numeric vector risk scores corresponding observation surv ignored, left compatibility metrics times ignored, left compatibility metrics","code":""},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_c_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Concordance index loss — loss_one_minus_c_index","text":"numeric 0 1, lower values indicate better performance","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_c_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Concordance index loss — loss_one_minus_c_index","text":"","code":"# \\donttest{ library(survival) library(survex)  rotterdam <- survival::rotterdam rotterdam$year <- NULL cox_rotterdam_rec <- coxph(Surv(rtime, recur) ~ .,     data = rotterdam,     model = TRUE, x = TRUE, y = TRUE) coxph_explainer <- explain(cox_rotterdam_rec) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  2982  rows  12  cols (  extracted from the model  )  #>   -> target variable   :  2982  values ( 1518 events and 1464 censored ) (  extracted from the model  )  #>   -> times             :  100 unique time points , min = 36 , mean = 2066.1 , max = 5394.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    risk <- coxph_explainer$predict_function(coxph_explainer$model, coxph_explainer$data) loss_one_minus_c_index(y_true = coxph_explainer$y, risk = risk) #> [1] 0.1366642 # }"},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_cd_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cumulative/Dynamic AUC loss — loss_one_minus_cd_auc","title":"Calculate Cumulative/Dynamic AUC loss — loss_one_minus_cd_auc","text":"function subtracts C/D AUC metric one obtain loss function whose lower values indicate better model performance (useful permutational feature importance)","code":""},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_cd_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cumulative/Dynamic AUC loss — loss_one_minus_cd_auc","text":"","code":"loss_one_minus_cd_auc(y_true = NULL, risk = NULL, surv = NULL, times = NULL)"},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_cd_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cumulative/Dynamic AUC loss — loss_one_minus_cd_auc","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk ignored, left compatibility metrics surv matrix containing predicted survival functions considered observations, row represents single observation, whereas column one time point times vector time points survival function evaluated","code":""},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_cd_auc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cumulative/Dynamic AUC loss — loss_one_minus_cd_auc","text":"numeric vector length equal length times vector, value (range 0 1) represents 1 - AUC metric specific time point, lower values indicating better performance.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_cd_auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cumulative/Dynamic AUC loss — loss_one_minus_cd_auc","text":"","code":"library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    y <- cph_exp$y times <- cph_exp$times surv <- cph_exp$predict_survival_function(cph, cph_exp$data, times)  loss_one_minus_cd_auc(y, surv = surv, times = times) #>  [1] 0.3407407 0.3407407 0.2611940 0.1954545 0.1647287 0.2153333 0.2154472 #>  [8] 0.2154472 0.2601093 0.2588235 0.2493310 0.2483580 0.2483580 0.2371542 #> [15] 0.2017857 0.2017857 0.1848485 0.1666667 0.1666667 0.1512477 0.1592262 #> [22] 0.1487721 0.1666667 0.1703297 0.1641753 0.1834586 0.1940371 0.1940371 #> [29] 0.1915459 0.1815603 0.1968633 0.1978200 0.1972184 0.1841629 0.1607143 #> [36] 0.1607143 0.1594959 0.1594959 0.1636364 0.1769892 0.1825397 0.1735873 #> [43] 0.1700811 0.1808102 0.1567164 0.1567164 0.1589842 0.1624572 0.1673118 #> [50] 0.1673118 0.1545455 0.1514622 0.1514622 0.1534368 0.1534368 0.1646451 #> [57] 0.1659827 0.1659827 0.1892393 0.1966903 0.1966903 0.2089443 0.2089443 #> [64] 0.2194458 0.2111280 0.2175258 0.2169021 0.2278378 0.2169967 0.2198744 #> [71] 0.2080420 0.1976190 0.2123244 0.2123244 0.2129751 0.2200277 0.2175000 #> [78] 0.2249263 0.2260870 0.2298851 0.2181088 0.2124183 0.2147059 0.2224044 #> [85] 0.2427410 0.2183623 0.2150072 0.2236220 0.2326389 0.2153846 0.1310433 #> [92] 0.1454545 0.1766169 0.1259259"},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_integrated_cd_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate integrated C/D AUC loss — loss_one_minus_integrated_cd_auc","title":"Calculate integrated C/D AUC loss — loss_one_minus_integrated_cd_auc","text":"function subtracts integrated C/D AUC metric one obtain loss function whose lower values indicate better model performance (useful permutational feature importance)","code":""},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_integrated_cd_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate integrated C/D AUC loss — loss_one_minus_integrated_cd_auc","text":"","code":"loss_one_minus_integrated_cd_auc(   y_true = NULL,   risk = NULL,   surv = NULL,   times = NULL,   auc = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_integrated_cd_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate integrated C/D AUC loss — loss_one_minus_integrated_cd_auc","text":"y_true survival::Surv object containing times statuses observations metric evaluated risk ignored, left compatibility metrics surv matrix containing predicted survival functions considered observations, row represents single observation, whereas column one time point times vector time points survival function evaluated auc vector containing already calculated AUC metric time points specified times parameter. provided arguments except times auc ignored","code":""},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_integrated_cd_auc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate integrated C/D AUC loss — loss_one_minus_integrated_cd_auc","text":"numeric 0 1, lower values indicate better performance","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/loss_one_minus_integrated_cd_auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate integrated C/D AUC loss — loss_one_minus_integrated_cd_auc","text":"","code":"library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    y <- cph_exp$y times <- cph_exp$times surv <- cph_exp$predict_survival_function(cph, cph_exp$data, times)   # calculating directly loss_one_minus_integrated_cd_auc(y, surv = surv, times = times) #> [1] 0.1783251  # calculating based on given auc vector auc <- cd_auc(y, surv = surv, times = times) loss_one_minus_integrated_cd_auc(times = times, auc = auc) #> [1] 0.1783251"},{"path":"https://modeloriented.github.io/survex/reference/model_parts.surv_explainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset Level Variable Importance for Survival Models — model_parts","title":"Dataset Level Variable Importance for Survival Models — model_parts","text":"function calculates variable importance change loss function variable permutations.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_parts.surv_explainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset Level Variable Importance for Survival Models — model_parts","text":"","code":"model_parts(explainer, ...)  # S3 method for surv_explainer model_parts(   explainer,   loss_function = survex::loss_brier_score,   ...,   type = \"raw\",   output_type = \"survival\",   N = 1000 )"},{"path":"https://modeloriented.github.io/survex/reference/model_parts.surv_explainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset Level Variable Importance for Survival Models — model_parts","text":"explainer model explained, preprocessed explain() function ... Arguments passed surv_feature_importance, surv_integrated_feature_importance B numeric, number permutations calculated variables character vector, names variables included calculation variable_groups list character vectors names explanatory variables. vector, single variable-importance measure computed joint effect variables names provided vector. default, variable_groups = NULL, case variable-importance measures computed separately variables indicated variables argument label label model, provides overrides x$label loss_function function used assess variable importance, default loss_brier_score survival models. function can supplied manually named parameters (y_true, risk, surv, times), y_true represents survival::Surv object observed times statuses, risk risk score calculated model, surv survival function observation evaluated times. type character vector, \"raw\" results losses permutation, \"ratio\" results form loss/loss_full_model \"difference\" results form loss - loss_full_model output_type either \"survival\" \"risk\" type survival model output used explanations. \"survival\" explanations based survival function. Otherwise scalar risk predictions used DALEX::model_profile function. N number observations sampled calculation variable importance. NULL variable importance calculated whole dataset.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_parts.surv_explainer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dataset Level Variable Importance for Survival Models — model_parts","text":"object class c(\"model_parts_survival\", \"surv_feature_importance\"). list explanations result element","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_parts.surv_explainer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset Level Variable Importance for Survival Models — model_parts","text":"Note: function can run within progressr::with_progress() display progress bar, execution can take long, especially large datasets.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_parts.surv_explainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset Level Variable Importance for Survival Models — model_parts","text":"","code":"# \\donttest{ library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) rsf_ranger <- ranger::ranger(Surv(time, status) ~ .,   data = veteran,   respect.unordered.factors = TRUE,   num.trees = 100,   mtry = 3,   max.depth = 5 )  cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    rsf_ranger_exp <- explain(rsf_ranger,   data = veteran[, -c(3, 4)],   y = Surv(veteran$time, veteran$status) ) #> Preparation of a new explainer is initiated  #>   -> model label       :  ranger (  default  )  #>   -> data              :  137  rows  6  cols  #>   -> target variable   :  137  values ( 128 events and 9 censored )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.ranger()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.ranger()$chf will be used (  default  )  #>   -> model_info        :  package ranger , ver. 0.14.1 , task survival (  default  )  #>   A new explainer has been created!    cph_model_parts_brier <- model_parts(cph_exp) print(head(cph_model_parts_brier$result)) #>   times _full_model_        trt   celltype      karno   diagtime        age #> 1  1.00   0.01450469 0.01456449 0.01417548 0.01468652 0.01450496 0.01453420 #> 2  1.36   0.01450469 0.01456449 0.01417548 0.01468652 0.01450496 0.01453420 #> 3  2.72   0.02131799 0.02144988 0.02089593 0.02174350 0.02131997 0.02143228 #> 4  4.24   0.03395903 0.03382314 0.03389785 0.03597141 0.03396147 0.03455322 #> 5  7.00   0.05085721 0.05100970 0.05229683 0.05628847 0.05085963 0.05158446 #> 6  8.00   0.07237285 0.07229194 0.07617603 0.08248948 0.07238154 0.07328267 #>        prior _baseline_ permutation label #> 1 0.01452008 0.01461570           0 coxph #> 2 0.01452008 0.01461570           0 coxph #> 3 0.02137176 0.02187164           0 coxph #> 4 0.03399217 0.03594605           0 coxph #> 5 0.05074909 0.05676119           0 coxph #> 6 0.07240107 0.08316083           0 coxph plot(cph_model_parts_brier)    rsf_ranger_model_parts <- model_parts(rsf_ranger_exp) print(head(rsf_ranger_model_parts$result)) #>   times _full_model_         trt   celltype      karno   diagtime        age #> 1  1.00  0.009442243 0.009711451 0.01105345 0.01237271 0.01075585 0.01214739 #> 2  1.36  0.009442243 0.009711451 0.01105345 0.01237271 0.01075585 0.01214739 #> 3  2.72  0.014334697 0.014819619 0.01599854 0.01826325 0.01725822 0.01778600 #> 4  4.24  0.021555980 0.022312029 0.02420769 0.02945386 0.02499047 0.03072709 #> 5  7.00  0.035911959 0.037449220 0.03975771 0.04941859 0.04019580 0.04666347 #> 6  8.00  0.050075153 0.052050083 0.05619405 0.07078318 0.05967745 0.06132793 #>        prior _baseline_ permutation  label #> 1 0.01012875 0.01547016           0 ranger #> 2 0.01012875 0.01547016           0 ranger #> 3 0.01530297 0.02313983           0 ranger #> 4 0.02259648 0.03829164           0 ranger #> 5 0.03694266 0.06013503           0 ranger #> 6 0.05219889 0.08985848           0 ranger plot(cph_model_parts_brier, rsf_ranger_model_parts)  # }"},{"path":"https://modeloriented.github.io/survex/reference/model_performance.surv_explainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset Level Performance Measures — model_performance","title":"Dataset Level Performance Measures — model_performance","text":"function calculates metrics survival models. metrics calculated C/D AUC, Brier score, integrated versions, well concordance index. also can calculate ROC curves specific selected time points.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_performance.surv_explainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset Level Performance Measures — model_performance","text":"","code":"model_performance(explainer, ...)  # S3 method for surv_explainer model_performance(explainer, ..., type = \"metrics\", times = NULL)"},{"path":"https://modeloriented.github.io/survex/reference/model_performance.surv_explainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset Level Performance Measures — model_performance","text":"explainer model explained, preprocessed explain() function ... parameters, currently ignored type character, either \"metrics\" \"roc\". \"metrics\" performance metrics calculated, \"roc\" ROC curves selected time points calculated. times numeric vector times. type == \"metrics\" survival function evaluated times, type == \"roc\" ROC curves calculated times.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_performance.surv_explainer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dataset Level Performance Measures — model_performance","text":"object class \"model_performance_survival\". list metric values calculated model.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_performance.surv_explainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset Level Performance Measures — model_performance","text":"","code":"library(survival) library(survex)   cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) rsf_ranger <- ranger::ranger(Surv(time, status) ~ .,                             data = veteran,                             respect.unordered.factors = TRUE,                             num.trees = 100,                             mtry = 3,                             max.depth = 5)  rsf_src <- randomForestSRC::rfsrc(Surv(time, status) ~ .,                                 data = veteran)  cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!   rsf_ranger_exp <- explain(rsf_ranger, data = veteran[, -c(3, 4)],                           y = Surv(veteran$time, veteran$status)) #> Preparation of a new explainer is initiated  #>   -> model label       :  ranger (  default  )  #>   -> data              :  137  rows  6  cols  #>   -> target variable   :  137  values ( 128 events and 9 censored )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.ranger()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.ranger()$chf will be used (  default  )  #>   -> model_info        :  package ranger , ver. 0.14.1 , task survival (  default  )  #>   A new explainer has been created!   rsf_src_exp <- explain(rsf_src) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!     cph_model_performance <- model_performance(cph_exp) rsf_ranger_model_performance <- model_performance(rsf_ranger_exp) rsf_src_model_performance <- model_performance(rsf_src_exp)  print(cph_model_performance) #> $eval_times #>  [1]   1.00   1.36   2.72   4.24   7.00   8.00  10.00  10.60  11.96  12.32 #> [11]  13.00  15.00  15.40  17.52  18.00  18.48  19.00  20.00  20.56  21.00 #> [21]  22.56  24.00  25.00  27.16  29.44  30.00  31.00  32.04  34.76  37.44 #> [31]  42.60  43.96  45.96  48.68  51.00  51.76  52.00  52.48  53.84  54.40 #> [41]  57.68  60.84  65.52  72.64  80.00  80.72  82.72  84.24  87.00  89.40 #> [51]  92.48  95.00  96.76  99.00  99.60 100.00 103.00 104.36 110.04 111.00 #> [61] 111.76 117.00 117.48 121.36 123.60 129.36 132.92 139.28 141.92 144.00 #> [71] 151.72 155.16 162.00 162.88 174.40 182.64 193.28 200.88 218.88 229.80 #> [81] 231.00 244.56 256.80 278.20 284.60 307.52 342.04 367.08 383.04 389.60 #> [91] 402.64 462.52 562.52 845.56 #>  #> $brier_score #>  [1] 0.01450469 0.01450469 0.02131799 0.03395903 0.05085721 0.07237285 #>  [7] 0.08296505 0.08296505 0.08976566 0.10034947 0.10895859 0.11860639 #> [13] 0.11860639 0.12115921 0.12534671 0.12534671 0.12812196 0.12899805 #> [19] 0.12899805 0.12894844 0.13311293 0.13452743 0.13853090 0.14201661 #> [25] 0.14171276 0.15028547 0.15745581 0.15745581 0.15894651 0.15887866 #> [31] 0.16421655 0.16678636 0.16752588 0.16054595 0.15386626 0.15386626 #> [37] 0.15595910 0.15595910 0.15824493 0.16471718 0.16763382 0.16364167 #> [43] 0.16343522 0.16768271 0.15672279 0.15672279 0.15781375 0.15800998 #> [49] 0.15707059 0.15707059 0.15188724 0.15110733 0.15110733 0.15151055 #> [55] 0.15151055 0.15237535 0.15325489 0.15325489 0.16278271 0.16469163 #> [61] 0.16469163 0.16725319 0.16725319 0.17057980 0.16644868 0.16788043 #> [67] 0.16572450 0.16628150 0.16073207 0.15935967 0.15352345 0.14851016 #> [73] 0.14642744 0.14642744 0.14359704 0.14083776 0.13666323 0.13547324 #> [79] 0.12885560 0.12559400 0.11816123 0.11207367 0.10765794 0.09901280 #> [85] 0.09889997 0.09031670 0.07760702 0.07237333 0.06668832 0.05535086 #> [91] 0.04565290 0.04001131 0.02744170 0.01789265 #>  #> $auc #>  [1] 0.6592593 0.6592593 0.7388060 0.8045455 0.8352713 0.7846667 0.7845528 #>  [8] 0.7845528 0.7398907 0.7411765 0.7506690 0.7516420 0.7516420 0.7628458 #> [15] 0.7982143 0.7982143 0.8151515 0.8333333 0.8333333 0.8487523 0.8407738 #> [22] 0.8512279 0.8333333 0.8296703 0.8358247 0.8165414 0.8059629 0.8059629 #> [29] 0.8084541 0.8184397 0.8031367 0.8021800 0.8027816 0.8158371 0.8392857 #> [36] 0.8392857 0.8405041 0.8405041 0.8363636 0.8230108 0.8174603 0.8264127 #> [43] 0.8299189 0.8191898 0.8432836 0.8432836 0.8410158 0.8375428 0.8326882 #> [50] 0.8326882 0.8454545 0.8485378 0.8485378 0.8465632 0.8465632 0.8353549 #> [57] 0.8340173 0.8340173 0.8107607 0.8033097 0.8033097 0.7910557 0.7910557 #> [64] 0.7805542 0.7888720 0.7824742 0.7830979 0.7721622 0.7830033 0.7801256 #> [71] 0.7919580 0.8023810 0.7876756 0.7876756 0.7870249 0.7799723 0.7825000 #> [78] 0.7750737 0.7739130 0.7701149 0.7818912 0.7875817 0.7852941 0.7775956 #> [85] 0.7572590 0.7816377 0.7849928 0.7763780 0.7673611 0.7846154 0.8689567 #> [92] 0.8545455 0.8233831 0.8740741 #>  #> $cindex #> [1] 0.7360464 #>  #> $iauc #> [1] 0.8216749 #>  #> $integrated_brier_score #> [1] 0.07182192 #>  #> attr(,\"class\") #> [1] \"model_performance_survival\" \"surv_model_performance\"     #> [3] \"list\"                       #> attr(,\"label\") #> [1] \"coxph\"  plot(rsf_ranger_model_performance, cph_model_performance,      rsf_src_model_performance, metrics_type = \"scalar\")   plot(rsf_ranger_model_performance, cph_model_performance, rsf_src_model_performance)   cph_model_performance_roc <- model_performance(cph_exp, type = \"roc\", times = c(100, 500, 1200)) plot(cph_model_performance_roc)"},{"path":"https://modeloriented.github.io/survex/reference/model_profile.surv_explainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset Level Variable Profile as Partial Dependence Explanations for Survival Models — model_profile","title":"Dataset Level Variable Profile as Partial Dependence Explanations for Survival Models — model_profile","text":"function calculates explanations dataset level help explore model response function selected variables. explanations calculated extention Partial Dependence Profiles inclusion time dimension.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_profile.surv_explainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset Level Variable Profile as Partial Dependence Explanations for Survival Models — model_profile","text":"","code":"model_profile(   explainer,   variables = NULL,   N = 100,   ...,   groups = NULL,   k = NULL,   center = TRUE,   type = \"partial\",   output_type = \"survival\" )  # S3 method for surv_explainer model_profile(   explainer,   variables = NULL,   N = 100,   ...,   categorical_variables = NULL,   grid_points = 51,   groups = NULL,   k = NULL,   center = TRUE,   type = \"partial\",   output_type = \"survival\" )"},{"path":"https://modeloriented.github.io/survex/reference/model_profile.surv_explainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset Level Variable Profile as Partial Dependence Explanations for Survival Models — model_profile","text":"explainer model explained, preprocessed explain() function variables character, vector names variables explained N number observations used calculation aggregated profiles. default 100. NULL observations used. ... parameters passed DALEX::model_profile output_type == \"risk\", otherwise ignored groups output_type == \"risk\" variable name used grouping. default NULL, groups calculated. output_type == \"survival\" ignored k passed DALEX::model_profile output_type == \"risk\", otherwise ignored center logical, profiles centered clustering type type variable profile. output_type == \"survival\" \"partial\" implemented, otherwise passed DALEX::model_profile. output_type either \"survival\" \"risk\" type survival model output considered explanations. \"survival\" explanations based survival function. Otherwise scalar risk predictions used DALEX::model_profile function. categorical_variables character, vector names additional variables treated categorical (factors automatically treated categorical variables) grid_points maximum number points profile calculations. Note final number points may lower grid_points. passed internal function. default 51.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_profile.surv_explainer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dataset Level Variable Profile as Partial Dependence Explanations for Survival Models — model_profile","text":"object class model_profile_survival. list element result containing results calculation.","code":""},{"path":"https://modeloriented.github.io/survex/reference/model_profile.surv_explainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset Level Variable Profile as Partial Dependence Explanations for Survival Models — model_profile","text":"","code":"# \\donttest{ library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) rsf_src <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran)  cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!   rsf_src_exp <- explain(rsf_src) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    cph_model_profile <- model_profile(cph_exp, output_type = \"survival\",                                    variables = c(\"age\"))  head(cph_model_profile$result) #>   _vname_   _vtype_ _label_   _x_ _times_    _yhat_ _ids_ #> 1     age numerical   coxph 34.00       1 0.9825101     0 #> 2     age numerical   coxph 34.94       1 0.9826501     0 #> 3     age numerical   coxph 35.00       1 0.9826590     0 #> 4     age numerical   coxph 35.88       1 0.9827890     0 #> 5     age numerical   coxph 36.00       1 0.9828067     0 #> 6     age numerical   coxph 36.82       1 0.9829269     0  plot(cph_model_profile)  #> TableGrob (3 x 1) \"arrange\": 3 grobs #>   z     cells    name                grob #> 1 1 (1-1,1-1) arrange text[GRID.text.691] #> 2 2 (2-2,1-1) arrange text[GRID.text.692] #> 3 3 (3-3,1-1) arrange     gtable[arrange]  rsf_model_profile <- model_profile(rsf_src_exp, output_type = \"survival\",                                    variables = c(\"age\", \"celltype\"))  head(rsf_model_profile$result) #>     _vname_   _vtype_ _label_ _x_ _times_    _yhat_ _ids_ #> 1       age numerical   rfsrc  34    1.00 0.8721207     0 #> 92      age numerical   rfsrc  34    1.36 0.8721207     0 #> 183     age numerical   rfsrc  34    2.72 0.8645073     0 #> 274     age numerical   rfsrc  34    4.24 0.7807784     0 #> 365     age numerical   rfsrc  34    7.00 0.7663110     0 #> 456     age numerical   rfsrc  34    8.00 0.7444298     0  plot(rsf_model_profile, variables = c(\"age\", \"celltype\"), numerical_plot_type = \"contours\")  #> TableGrob (3 x 1) \"arrange\": 3 grobs #>   z     cells    name                grob #> 1 1 (1-1,1-1) arrange text[GRID.text.757] #> 2 2 (2-2,1-1) arrange text[GRID.text.758] #> 3 3 (3-3,1-1) arrange     gtable[arrange] # }"},{"path":"https://modeloriented.github.io/survex/reference/plot.model_parts_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Parts for Survival Models — plot.model_parts_survival","title":"Plot Model Parts for Survival Models — plot.model_parts_survival","text":"function wrapper plotting model_parts objects created survival models.","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_parts_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Parts for Survival Models — plot.model_parts_survival","text":"","code":"# S3 method for model_parts_survival plot(x, ...)"},{"path":"https://modeloriented.github.io/survex/reference/plot.model_parts_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Parts for Survival Models — plot.model_parts_survival","text":"x object class \"model_parts_survival\" plotted ... additional parameters passed plot.surv_feature_importance function","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_parts_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Model Parts for Survival Models — plot.model_parts_survival","text":"object class ggplot.","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_parts_survival.html","id":"plot-options","dir":"Reference","previous_headings":"","what":"Plot options","title":"Plot Model Parts for Survival Models — plot.model_parts_survival","text":"title - character, title plot subtitle - character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels max_vars - maximum number variables plotted (least important variables ignored) colors - character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.model_parts_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Parts for Survival Models — plot.model_parts_survival","text":"","code":"library(survival) library(survex)  model <- coxph(Surv(time, status) ~ ., data = veteran, x = TRUE, model = TRUE, y = TRUE) explainer <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    mp <- model_parts(explainer)  plot(mp)"},{"path":"https://modeloriented.github.io/survex/reference/plot.model_performance_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Performance for Survival Models — plot.model_performance_survival","title":"Plot Model Performance for Survival Models — plot.model_performance_survival","text":"function wrapper plotting model_performance objects created survival models.","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_performance_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Performance for Survival Models — plot.model_performance_survival","text":"","code":"# S3 method for model_performance_survival plot(x, ...)"},{"path":"https://modeloriented.github.io/survex/reference/plot.model_performance_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Performance for Survival Models — plot.model_performance_survival","text":"x object class \"model_performance_survival\" plotted ... additional parameters passed plot.surv_model_performance plot.surv_model_performance_rocs function","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_performance_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Model Performance for Survival Models — plot.model_performance_survival","text":"object class ggplot.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.model_performance_survival.html","id":"plot-surv-model-performance","dir":"Reference","previous_headings":"","what":"plot.surv_model_performance","title":"Plot Model Performance for Survival Models — plot.model_performance_survival","text":"x - object class \"surv_model_performance\" plotted ... - additional objects class \"surv_model_performance\" plotted together metrics - character, names metrics plotted (subset C/D AUC\", \"Brier score\" metrics_type %% c(\"time_dependent\", \"functional\") subset \"C-index\",\"Integrated Brier score\", \"Integrated C/D AUC\" metrics_type == \"scalar\"), default (NULL) metrics given type plotted metrics_type - character, either one c(\"time_dependent\",\"functional\") functional metrics \"scalar\" scalar metrics title - character, title plot subtitle - character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels facet_ncol - number columns arranging subplots colors - character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_performance_survival.html","id":"plot-surv-model-performance-rocs","dir":"Reference","previous_headings":"","what":"plot.surv_model_performance_rocs","title":"Plot Model Performance for Survival Models — plot.model_performance_survival","text":"x - object class \"surv_model_performance_rocs\" plotted ... - additional objects class \"surv_model_performance_rocs\" plotted together title - character, title plot subtitle - character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels colors - character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\") facet_ncol - number columns arranging subplots","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.model_performance_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Performance for Survival Models — plot.model_performance_survival","text":"","code":"library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    m_perf <- model_performance(exp) plot(m_perf, metrics_type = \"functional\")   m_perf_roc <- model_performance(exp, type = \"roc\", times = c(100, 300)) plot(m_perf_roc)"},{"path":"https://modeloriented.github.io/survex/reference/plot.model_profile_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Profile for Survival Models — plot.model_profile_survival","title":"Plot Model Profile for Survival Models — plot.model_profile_survival","text":"function plots objects class \"model_profile_survival\".","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_profile_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Profile for Survival Models — plot.model_profile_survival","text":"","code":"# S3 method for model_profile_survival plot(   x,   ...,   variables = NULL,   variable_type = NULL,   facet_ncol = NULL,   numerical_plot_type = \"lines\",   title = \"Partial dependence survival profile\",   subtitle = NULL,   colors = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/plot.model_profile_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Profile for Survival Models — plot.model_profile_survival","text":"x object class model_profile_survival plotted ... additional parameters, unused, currently ignored variables character, names variables plotted variable_type character, either \"numerical\", \"categorical\" NULL (default), select one type variable plotting, leave NULL facet_ncol number columns arranging subplots numerical_plot_type character, either \"lines\", \"contours\" selects type numerical variable plots title character, title plot subtitle character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels colors character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_profile_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Model Profile for Survival Models — plot.model_profile_survival","text":"grid ggplot objects arranged gridExtra::grid.arrange function.","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.model_profile_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Profile for Survival Models — plot.model_profile_survival","text":"","code":"# \\donttest{ library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    m_prof <- model_profile(exp, categorical_variables = \"trt\")  plot(m_prof, facet_ncol = 1)  #> TableGrob (3 x 1) \"arrange\": 3 grobs #>   z     cells    name                 grob #> 1 1 (1-1,1-1) arrange text[GRID.text.1285] #> 2 2 (2-2,1-1) arrange text[GRID.text.1286] #> 3 3 (3-3,1-1) arrange      gtable[arrange]  plot(m_prof, numerical_plot_type = \"contours\", facet_ncol = 1)  #> TableGrob (3 x 1) \"arrange\": 3 grobs #>   z     cells    name                 grob #> 1 1 (1-1,1-1) arrange text[GRID.text.1703] #> 2 2 (2-2,1-1) arrange text[GRID.text.1704] #> 3 3 (3-3,1-1) arrange      gtable[arrange]  plot(m_prof, variables = c(\"trt\", \"age\"), facet_ncol = 1)  #> TableGrob (3 x 1) \"arrange\": 3 grobs #>   z     cells    name                 grob #> 1 1 (1-1,1-1) arrange text[GRID.text.2345] #> 2 2 (2-2,1-1) arrange text[GRID.text.2346] #> 3 3 (3-3,1-1) arrange      gtable[arrange] # }"},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_parts_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","title":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","text":"function plots objects class \"predict_parts_survival\" - local explanations survival models","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_parts_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","text":"","code":"# S3 method for predict_parts_survival plot(x, ...)"},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_parts_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","text":"x object class  \"predict_parts_survival\" plotted ... additional parameters passed plot.surv_shap plot.surv_lime functions","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_parts_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","text":"object class ggplot.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_parts_survival.html","id":"plot-surv-shap","dir":"Reference","previous_headings":"","what":"plot.surv_shap","title":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","text":"x - object class \"surv_shap\" plotted ... - additional objects class surv_shap plotted together title - character, title plot subtitle - character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels colors - character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_parts_survival.html","id":"plot-surv-lime","dir":"Reference","previous_headings":"","what":"plot.surv_lime","title":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","text":"x -  object class \"surv_lime\" plotted type -  character, either \"coefficients\" \"local_importance\", selects type plot show_survival_function -  logical, survival function explanations plotted next barplot ... -  parameters currently ignored title -  character, title plot subtitle -  character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels colors -  character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_parts_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Predict Parts for Survival Models — plot.predict_parts_survival","text":"","code":"# \\donttest{ library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    p_parts_shap <- predict_parts(exp, veteran[1, -c(3, 4)], type = \"survshap\") plot(p_parts_shap)   p_parts_lime <- predict_parts(exp, veteran[1, -c(3, 4)], type = \"survlime\") plot(p_parts_lime)  # }"},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_profile_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Predict Profile for Survival Models — plot.predict_profile_survival","title":"Plot Predict Profile for Survival Models — plot.predict_profile_survival","text":"function plots objects class \"predict_profile_survival\" - local explanations survival models","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_profile_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Predict Profile for Survival Models — plot.predict_profile_survival","text":"","code":"# S3 method for predict_profile_survival plot(x, ...)"},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_profile_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Predict Profile for Survival Models — plot.predict_profile_survival","text":"x object class  \"predict_profile_survival\" plotted ... additional parameters passed plot.surv_ceteris_paribus function","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_profile_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Predict Profile for Survival Models — plot.predict_profile_survival","text":"grid ggplot objects arranged gridExtra::grid.arrange function.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_profile_survival.html","id":"plot-surv-ceteris-paribus","dir":"Reference","previous_headings":"","what":"plot.surv_ceteris_paribus","title":"Plot Predict Profile for Survival Models — plot.predict_profile_survival","text":"x - object class predict_profile_survival plotted ... - additional parameters, unused, currently ignored colors - character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\") variable_type - character, either \"numerical\", \"categorical\" NULL (default), select one type variable plotting, leave NULL facet_ncol - number columns arranging subplots variables - character, names variables plotted numerical_plot_type - character, either \"lines\", \"contours\" selects type numerical variable plots title - character, title plot subtitle - character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.predict_profile_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Predict Profile for Survival Models — plot.predict_profile_survival","text":"","code":"# \\donttest{ library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    p_profile <- predict_profile(exp, veteran[1, -c(3, 4)])  plot(p_profile)   p_profile_with_cat <- predict_profile(     exp,     veteran[1, -c(3, 4)],     categorical_variables = c(\"trt\", \"prior\") )  plot(p_profile_with_cat)  # }"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_ceteris_paribus.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Predict Profile for Survival Models — plot.surv_ceteris_paribus","title":"Plot Predict Profile for Survival Models — plot.surv_ceteris_paribus","text":"function plots objects class \"predict_profile_survival\".","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_ceteris_paribus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Predict Profile for Survival Models — plot.surv_ceteris_paribus","text":"","code":"# S3 method for surv_ceteris_paribus plot(   x,   ...,   colors = NULL,   variable_type = NULL,   facet_ncol = NULL,   variables = NULL,   numerical_plot_type = \"lines\",   title = \"Ceteris paribus survival profile\",   subtitle = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_ceteris_paribus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Predict Profile for Survival Models — plot.surv_ceteris_paribus","text":"x object class predict_profile_survival plotted ... additional parameters, unused, currently ignored colors character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\") variable_type character, either \"numerical\", \"categorical\" NULL (default), select one type variable plotting, leave NULL facet_ncol number columns arranging subplots variables character, names variables plotted numerical_plot_type character, either \"lines\", \"contours\" selects type numerical variable plots title character, title plot subtitle character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_ceteris_paribus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Predict Profile for Survival Models — plot.surv_ceteris_paribus","text":"grid ggplot objects arranged gridExtra::grid.arrange function.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_ceteris_paribus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Predict Profile for Survival Models — plot.surv_ceteris_paribus","text":"","code":"# \\donttest{ library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    p_profile <- predict_profile(exp, veteran[1, -c(3, 4)])  plot(p_profile)   p_profile_with_cat <- predict_profile(     exp,     veteran[1, -c(3, 4)],     categorical_variables = c(\"trt\", \"prior\") )  plot(p_profile_with_cat)  # }"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_feature_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Permuatational Feature Importance for Survival Models — plot.surv_feature_importance","title":"Plot Permuatational Feature Importance for Survival Models — plot.surv_feature_importance","text":"function plots feature importance objects created survival models.","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_feature_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Permuatational Feature Importance for Survival Models — plot.surv_feature_importance","text":"","code":"# S3 method for surv_feature_importance plot(   x,   ...,   title = \"Time-dependent feature importance\",   subtitle = NULL,   max_vars = 6,   colors = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_feature_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Permuatational Feature Importance for Survival Models — plot.surv_feature_importance","text":"x object class \"surv_feature_importance\" plotted ... additional objects class \"surv_feature_importance\" plotted together title character, title plot subtitle character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels max_vars maximum number variables plotted (least important variables ignored) colors character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_feature_importance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Permuatational Feature Importance for Survival Models — plot.surv_feature_importance","text":"object class ggplot.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_feature_importance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Permuatational Feature Importance for Survival Models — plot.surv_feature_importance","text":"","code":"# \\donttest{ library(survival) library(survex)  model <- coxph(Surv(time, status) ~ ., data = veteran, x = TRUE, model = TRUE, y = TRUE) model_rf <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) explainer <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!   explainer_rf <- explain(model_rf) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    mp <- model_parts(explainer) mp_rf <- model_parts(explainer_rf)  plot(mp, mp_rf)  # }"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_lime.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot SurvLIME Explanations for Survival Models — plot.surv_lime","title":"Plot SurvLIME Explanations for Survival Models — plot.surv_lime","text":"functions plots objects class surv_lime - LIME explanations survival models.","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_lime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot SurvLIME Explanations for Survival Models — plot.surv_lime","text":"","code":"# S3 method for surv_lime plot(   x,   type = \"local_importance\",   show_survival_function = TRUE,   ...,   title = \"SurvLIME\",   subtitle = NULL,   colors = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_lime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot SurvLIME Explanations for Survival Models — plot.surv_lime","text":"x object class \"surv_lime\" plotted type character, either \"coefficients\" \"local_importance\" (default), selects type plot show_survival_function logical, survival function explanations plotted next barplot ... parameters currently ignored title character, title plot subtitle character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels colors character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_lime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot SurvLIME Explanations for Survival Models — plot.surv_lime","text":"object class ggplot.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_lime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot SurvLIME Explanations for Survival Models — plot.surv_lime","text":"","code":"library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    p_parts_lime <- predict_parts(exp, veteran[1, -c(3, 4)], type = \"survlime\") plot(p_parts_lime)"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Performance Metrics for Survival Models — plot.surv_model_performance","title":"Plot Model Performance Metrics for Survival Models — plot.surv_model_performance","text":"function plots objects class \"surv_model_performance\" - visualization metrics different models","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Performance Metrics for Survival Models — plot.surv_model_performance","text":"","code":"# S3 method for surv_model_performance plot(   x,   ...,   metrics = NULL,   metrics_type = \"time_dependent\",   title = \"Model performance\",   subtitle = NULL,   facet_ncol = NULL,   colors = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Performance Metrics for Survival Models — plot.surv_model_performance","text":"x object class \"surv_model_performance\" plotted ... additional objects class \"surv_model_performance\" plotted together metrics character, names metrics plotted (subset C/D AUC\", \"Brier score\" metrics_type %% c(\"time_dependent\", \"functional\") subset \"C-index\",\"Integrated Brier score\", \"Integrated C/D AUC\" metrics_type == \"scalar\"), default (NULL) metrics given type plotted metrics_type character, either one c(\"time_dependent\",\"functional\") functional metrics \"scalar\" scalar metrics title character, title plot subtitle character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels facet_ncol number columns arranging subplots colors character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Model Performance Metrics for Survival Models — plot.surv_model_performance","text":"object class ggplot.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Performance Metrics for Survival Models — plot.surv_model_performance","text":"","code":"library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    m_perf <- model_performance(exp) plot(m_perf)"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance_rocs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC Curves for Survival Models — plot.surv_model_performance_rocs","title":"Plot ROC Curves for Survival Models — plot.surv_model_performance_rocs","text":"function plots objects class \"surv_model_performance_rocs\" - ROC curves specific time points survival models","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance_rocs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC Curves for Survival Models — plot.surv_model_performance_rocs","text":"","code":"# S3 method for surv_model_performance_rocs plot(   x,   ...,   title = \"ROC curves for selected timepoints\",   subtitle = NULL,   colors = NULL,   facet_ncol = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance_rocs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC Curves for Survival Models — plot.surv_model_performance_rocs","text":"x object class \"surv_model_performance_rocs\" plotted ... additional objects class \"surv_model_performance_rocs\" plotted together title character, title plot subtitle character, subtitle plot, NULL automaticaly generated \"created XXX, YYY models\", XXX YYY explainer labels colors character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\") facet_ncol number columns arranging subplots","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance_rocs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC Curves for Survival Models — plot.surv_model_performance_rocs","text":"object class ggplot.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_model_performance_rocs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC Curves for Survival Models — plot.surv_model_performance_rocs","text":"","code":"library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    m_perf_roc <- model_performance(exp, type = \"roc\", times = c(100, 300)) plot(m_perf_roc)"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_shap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot SurvSHAP(t) Explanations for Survival Models — plot.surv_shap","title":"Plot SurvSHAP(t) Explanations for Survival Models — plot.surv_shap","text":"functions plots objects class surv_shap - SurvSHAP time-dependent explanations survival models.","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_shap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot SurvSHAP(t) Explanations for Survival Models — plot.surv_shap","text":"","code":"# S3 method for surv_shap plot(x, ..., title = \"SurvSHAP(t)\", subtitle = NULL, colors = NULL)"},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_shap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot SurvSHAP(t) Explanations for Survival Models — plot.surv_shap","text":"x object class \"surv_shap\" plotted ... additional objects class surv_shap plotted together title character, title plot subtitle character, subtitle plot, NULL automatically generated \"created XXX, YYY models\", XXX YYY explainer labels colors character vector containing colors used plotting variables (containing either hex codes \"#FF69B4\", names \"blue\")","code":""},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_shap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot SurvSHAP(t) Explanations for Survival Models — plot.surv_shap","text":"object class ggplot.","code":""},{"path":[]},{"path":"https://modeloriented.github.io/survex/reference/plot.surv_shap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot SurvSHAP(t) Explanations for Survival Models — plot.surv_shap","text":"","code":"# \\donttest{ library(survival) library(survex)  model <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran) exp <- explain(model) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    p_parts_shap <- predict_parts(exp, veteran[1, -c(3, 4)], type = \"survshap\") plot(p_parts_shap)  # }"},{"path":"https://modeloriented.github.io/survex/reference/predict.surv_explainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions for survival models — predict.surv_explainer","title":"Model predictions for survival models — predict.surv_explainer","text":"function allows calculating model prediction unified way.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict.surv_explainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions for survival models — predict.surv_explainer","text":"","code":"# S3 method for surv_explainer predict(object, newdata = NULL, output_type = \"survival\", times = NULL, ...)"},{"path":"https://modeloriented.github.io/survex/reference/predict.surv_explainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions for survival models — predict.surv_explainer","text":"object model make predictions, preprocessed explain function. newdata data used prediction output_type character, either \"risk\", \"survival\" \"chf\" depending desired output times numeric vector times survival cumulative hazard function predictions evaluated . \"output_type == \"risk\" argument ignored, left NULL extracted object$times. ... arguments, currently ignored","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict.surv_explainer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions for survival models — predict.surv_explainer","text":"vector matrix containing prediction.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict.surv_explainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions for survival models — predict.surv_explainer","text":"","code":"library(survival) library(survex)   cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) rsf_ranger <- ranger::ranger(Surv(time, status) ~ .,                              data = veteran,                              respect.unordered.factors = TRUE,                              num.trees = 100,                              mtry = 3,                              max.depth = 5)  cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    rsf_ranger_exp <- explain(rsf_ranger, data = veteran[, -c(3, 4)],                           y = Surv(veteran$time, veteran$status)) #> Preparation of a new explainer is initiated  #>   -> model label       :  ranger (  default  )  #>   -> data              :  137  rows  6  cols  #>   -> target variable   :  137  values ( 128 events and 9 censored )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.ranger()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.ranger()$chf will be used (  default  )  #>   -> model_info        :  package ranger , ver. 0.14.1 , task survival (  default  )  #>   A new explainer has been created!     predict(cph_exp, veteran[1, ], output_type = \"survival\")[, 1:10] #>  [1] 0.9959425 0.9959425 0.9938949 0.9896930 0.9831475 0.9739694 0.9692183 #>  [8] 0.9692183 0.9668100 0.9619751  predict(cph_exp, veteran[1, ], output_type = \"risk\") #>         1  #> 0.7354128   predict(rsf_ranger_exp, veteran[1, ], output_type = \"chf\")[, 1:10] #>  [1] 0.01006715 0.01006715 0.01006715 0.01029971 0.01440227 0.02162580 #>  [7] 0.02715519 0.02715519 0.03178317 0.04499403"},{"path":"https://modeloriented.github.io/survex/reference/predict_parts.surv_explainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Instance Level Parts of Survival Model Predictions — predict_parts","title":"Instance Level Parts of Survival Model Predictions — predict_parts","text":"function decomposes model prediction individual parts, attributions particular variables. explanations can made via SurvLIME SurvSHAP(t) methods.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict_parts.surv_explainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instance Level Parts of Survival Model Predictions — predict_parts","text":"","code":"predict_parts(explainer, ...)  # S3 method for surv_explainer predict_parts(   explainer,   new_observation,   ...,   N = NULL,   type = \"survshap\",   output_type = \"survival\" )"},{"path":"https://modeloriented.github.io/survex/reference/predict_parts.surv_explainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instance Level Parts of Survival Model Predictions — predict_parts","text":"explainer model explained, preprocessed explain() function ... parameters passed IBreakDown::break_down output_type==\"risk\", output_type==\"survival\" surv_shap() surv_lime() functions depending selected type new_observation new observation prediction need explained N maximum number observations used calculation attributions. NULL (default) observations used. type output_type == \"survival\" must either \"survshap\" \"survlime\", otherwise refer DALEX::predict_parts output_type either \"survival\" \"risk\" type survival model output considered explanations. \"survival\" explanations based survival function. Otherwise scalar risk predictions used DALEX::predict_parts function.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict_parts.surv_explainer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Instance Level Parts of Survival Model Predictions — predict_parts","text":"object class \"predict_parts_survival\" additional classes depending type explanations. list element result containing results calculation.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict_parts.surv_explainer.html","id":"additional-parameters","dir":"Reference","previous_headings":"","what":"Additional parameters","title":"Instance Level Parts of Survival Model Predictions — predict_parts","text":"additional parameters passed internal functions surv_lime N -  positive integer, number observations generated neighbourhood distance_metric -  character, name distance metric used, \"euclidean\" implemented kernel_width -  numeric, parameter used calculating weights, default sqrt(ncol(data)*0.75) sampling_method -  character, name method generating neighbourhood, \"gaussian\" implemented sample_around_instance -  logical, neighbourhood generated new observation center (default), mean whole dataset used center max_iter -  numeric, maximal number iteration optimization problem categorical_variables -  character vector, names variables treated categories (factors included default) k -  small positive number > 1, added chf taking log, weigths negative surv_shap timestamps -  numeric vector, time points survival function evaluated y_true -  two element numeric vector matrix one row two columns, first element true observed time second status observation, used plotting calculation_method -  character, \"kernel\" implemented now. aggregation_method -  character, either \"mean_absolute\" \"integral\", \"max_absolute\", \"sum_of_squares\"","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict_parts.surv_explainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instance Level Parts of Survival Model Predictions — predict_parts","text":"","code":"# \\donttest{ library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!    cph_predict_parts_survshap <- predict_parts(cph_exp, new_observation = veteran[1, -c(3, 4)]) head(cph_predict_parts_survshap$result) #>                trt    celltype       karno     diagtime          age #> t=1    0.001348230 0.005738131 0.002384769 3.802552e-06 0.0007609354 #> t=1.36 0.001348230 0.005738131 0.002384769 3.802552e-06 0.0007609354 #> t=2.72 0.002012258 0.008577731 0.003545841 5.671947e-06 0.0011383997 #> t=4.24 0.003341661 0.014289563 0.005842108 9.406881e-06 0.0018993701 #> t=7    0.005327253 0.022887981 0.009196888 1.496380e-05 0.0030488847 #> t=8    0.007947563 0.034359457 0.013472284 2.225007e-05 0.0045890676 #>               prior #> t=1    0.0001742598 #> t=1.36 0.0001742598 #> t=2.72 0.0002603235 #> t=4.24 0.0004331010 #> t=7    0.0006923584 #> t=8    0.0010367437 plot(cph_predict_parts_survshap)   cph_predict_parts_survlime <- predict_parts(cph_exp, new_observation = veteran[1, -c(3, 4)],                                             type = \"survlime\") head(cph_predict_parts_survlime$result) #>           trt         karno      diagtime           age         prior  #>  0.0066572292 -0.0009929287 -0.0002633755  0.0006160827  0.0013891474  #> celltypelarge  #> -0.0079946916  plot(cph_predict_parts_survlime, type = \"local_importance\")  # }"},{"path":"https://modeloriented.github.io/survex/reference/predict_profile.surv_explainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Instance Level Profile as Ceteris Paribus for Survival Models — predict_profile","title":"Instance Level Profile as Ceteris Paribus for Survival Models — predict_profile","text":"function calculates Ceteris Paribus Proifles specific observation possibility take time dimension account.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict_profile.surv_explainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instance Level Profile as Ceteris Paribus for Survival Models — predict_profile","text":"","code":"predict_profile(   explainer,   new_observation,   variables = NULL,   categorical_variables = NULL,   ...,   type = \"ceteris_paribus\",   variable_splits_type = \"uniform\" )  # S3 method for surv_explainer predict_profile(   explainer,   new_observation,   variables = NULL,   categorical_variables = NULL,   ...,   type = \"ceteris_paribus\",   output_type = \"survival\",   variable_splits_type = \"uniform\" )"},{"path":"https://modeloriented.github.io/survex/reference/predict_profile.surv_explainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instance Level Profile as Ceteris Paribus for Survival Models — predict_profile","text":"explainer model explained, preprocessed explain() function new_observation new observation prediction need explained variables character vector containing names variables explained categorical_variables character vector names additional variables treated categorical (factors automatically treated categorical variables) ... additional parameters passed DALEX::predict_profile output_type ==\"risk\" type character, \"ceteris_paribus\" implemented variable_splits_type character, decides variable grids calculated. Use \"quantiles\" percentiles \"uniform\" (default) get uniform grid points. output_type either \"survival\" \"risk\" type survival model output considered explanations. \"survival\" explanations based survival function. Otherwise scalar risk predictions used DALEX::predict_profile function.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict_profile.surv_explainer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Instance Level Profile as Ceteris Paribus for Survival Models — predict_profile","text":"object class c(\"predict_profile_survival\", \"surv_ceteris_paribus\"). list final result result element.","code":""},{"path":"https://modeloriented.github.io/survex/reference/predict_profile.surv_explainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instance Level Profile as Ceteris Paribus for Survival Models — predict_profile","text":"","code":"# \\donttest{ library(survival) library(survex)  cph <- coxph(Surv(time, status) ~ ., data = veteran, model = TRUE, x = TRUE, y = TRUE) rsf_src <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran)  cph_exp <- explain(cph) #> Preparation of a new explainer is initiated  #>   -> model label       :  coxph (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  predict.coxph with type = 'risk' will be used (  default  )  #>   -> predict survival function  :  predictSurvProb.coxph will be used (  default  )  #>   -> predict cumulative hazard function  :  -log(predict_survival_function) will be used (  default  )  #>   -> model_info        :  package survival , ver. 3.3.1 , task survival (  default  )  #>   A new explainer has been created!   rsf_src_exp <- explain(rsf_src) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  stepfun based on predict.rfsrc()$chf will be used (  default  )  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!    cph_predict_profile <- predict_profile(cph_exp, veteran[2, -c(3, 4)],                                        variables = c(\"trt\", \"celltype\", \"karno\", \"age\"),                                        categorical_variables = \"trt\") plot(cph_predict_profile, facet_ncol = 2)    rsf_predict_profile <- predict_profile(rsf_src_exp, veteran[5, -c(3, 4)], variables = \"karno\") plot(cph_predict_profile, numerical_plot_type = \"contours\")  # }"},{"path":"https://modeloriented.github.io/survex/reference/risk_from_chf.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Risk Prediction based on the Survival Function — risk_from_chf","title":"Generate Risk Prediction based on the Survival Function — risk_from_chf","text":"models come ready use risk prediction. function allows generation based cumulative hazard function.","code":""},{"path":"https://modeloriented.github.io/survex/reference/risk_from_chf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Risk Prediction based on the Survival Function — risk_from_chf","text":"","code":"risk_from_chf(predict_cumulative_hazard_function, times)"},{"path":"https://modeloriented.github.io/survex/reference/risk_from_chf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Risk Prediction based on the Survival Function — risk_from_chf","text":"predict_cumulative_hazard_function function three arguments (model, newdata, times) allows making cumulative hazard predictions. times numeric vector times function evaluated.","code":""},{"path":"https://modeloriented.github.io/survex/reference/risk_from_chf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Risk Prediction based on the Survival Function — risk_from_chf","text":"function two arguments (model, newdata) returning vector risks.","code":""},{"path":"https://modeloriented.github.io/survex/reference/risk_from_chf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Risk Prediction based on the Survival Function — risk_from_chf","text":"","code":"library(survex) library(survival)  rsf_src <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran)  chf_function <- transform_to_stepfunction(predict,                                           type = \"chf\",                                           prediction_element = \"chf\",                                           times_element = \"time.interest\") risk_function <- risk_from_chf(chf_function, unique(veteran$time))  explainer <- explain(rsf_src,                      predict_cumulative_hazard_function = chf_function,                      predict_function = risk_function) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  risk_function  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  chf_function  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!"},{"path":"https://modeloriented.github.io/survex/reference/surv_aggregate_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for model_profile.R — surv_aggregate_profiles","title":"Helper functions for model_profile.R — surv_aggregate_profiles","text":"Helper functions model_profile.R","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_aggregate_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for model_profile.R — surv_aggregate_profiles","text":"","code":"surv_aggregate_profiles(   x,   ...,   variable_type = NULL,   groups = NULL,   type = \"partial\",   variables = NULL,   center = FALSE )"},{"path":"https://modeloriented.github.io/survex/reference/surv_aggregate_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for model_profile.R — surv_aggregate_profiles","text":"x object containing calculated ceteris_paribus profiles ... parameters, ignored variable_type character, either \"numerical\" \"categorical\", type variable calculated, left NULL (default), calculated groups unused, left compatibility type character, \"partial\" implemented variables character vector containing names variables explained center logical, profiles centered aggregations","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_aggregate_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for model_profile.R — surv_aggregate_profiles","text":"data.frame calculated results.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_ceteris_paribus.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for predict_profile.R — surv_ceteris_paribus","title":"Helper functions for predict_profile.R — surv_ceteris_paribus","text":"Helper functions predict_profile.R Helper functions predict_profile.R","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_ceteris_paribus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for predict_profile.R — surv_ceteris_paribus","text":"","code":"surv_ceteris_paribus(x, ...)  # S3 method for surv_explainer surv_ceteris_paribus(   x,   new_observation,   variables = NULL,   categorical_variables = NULL,   variable_splits = NULL,   grid_points = 101,   variable_splits_type = \"uniform\",   ... )"},{"path":"https://modeloriented.github.io/survex/reference/surv_ceteris_paribus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for predict_profile.R — surv_ceteris_paribus","text":"x model explained, preprocessed explain function ... parameters, currently ignored new_observation new observation predictions need explained variables character, names variables included calculations categorical_variables character vector, names variables treated categories (factors included default) variable_splits named list splits variables, cases created internal functions. NULL calculated based validation data available explainer grid_points maximum number points profile calculations. Note final number points may lower grid_points. passed internal function. default 101. variable_splits_type character, decides variable grids calculated. Use \"quantiles\" percentiles \"uniform\" (default) get uniform grid points.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_ceteris_paribus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for predict_profile.R — surv_ceteris_paribus","text":"data.frame containing result calculation.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_feature_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for model_parts.R — surv_feature_importance","title":"Helper functions for model_parts.R — surv_feature_importance","text":"Helper functions model_parts.R Helper functions model_parts.R","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_feature_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for model_parts.R — surv_feature_importance","text":"","code":"surv_feature_importance(x, ...)  # S3 method for surv_explainer surv_feature_importance(   x,   loss_function = NULL,   ...,   type = c(\"raw\", \"ratio\", \"difference\"),   B = 10,   variables = NULL,   variable_groups = NULL,   N = NULL,   label = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/surv_feature_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for model_parts.R — surv_feature_importance","text":"x model explained, preprocessed explain function ... parameters, currently ignored loss_function function used assess variable importance, default loss_brier_score survival models. function can supplied manually named parameters (y_true, risk, surv, times), y_true represents survival::Surv object observed times statuses, risk risk score calculated model, surv survival function observation evaluated times. type character vector, \"raw\" results losses permutation, \"ratio\" results form loss/loss_full_model \"difference\" results form loss - loss_full_model` B numeric, number permutations calculated variables character vector, names variables included calculation variable_groups list character vectors names explanatory variables. vector, single variable importance measure computed joint effect variables names provided vector. default, variable_groups = NULL, case variable importance measures computed separately variables indicated variables argument. N numeric, number observations sampled dataset purpose calculation label label model, provided overrides explainer$label","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_feature_importance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for model_parts.R — surv_feature_importance","text":"data.frame containing results calculation.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_feature_importance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper functions for model_parts.R — surv_feature_importance","text":"Note: function can run within progressr::with_progress() display progress bar, execution can take long, especially large datasets.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_integrated_feature_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for model_parts.R — surv_integrated_feature_importance","title":"Helper functions for model_parts.R — surv_integrated_feature_importance","text":"Helper functions model_parts.R","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_integrated_feature_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for model_parts.R — surv_integrated_feature_importance","text":"","code":"surv_integrated_feature_importance(   x,   loss_function = DALEX::loss_root_mean_square,   ...,   type = c(\"raw\", \"ratio\", \"difference\"),   B = 10,   variables = NULL,   variable_groups = NULL,   N = NULL,   label = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/surv_integrated_feature_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for model_parts.R — surv_integrated_feature_importance","text":"x model explained, preprocessed explain function loss_function function used assess variable importance, default loss_brier_score survival models. function take can supplied manually named parameters (y_true, risk, surv, times), y_true represents survival::Surv object observed times statuses, risk risk score calculated model, surv survival function observation evaluated times ... parameters, currently ignored type character vector, \"raw\" results losses permutation, \"ratio\" results form loss/loss_full_model \"difference\" results form loss - loss_full_model` B numeric, number permutations calculated variables character vector, names variables included calculation variable_groups list character vectors names explanatory variables. vector, single variable-importance measure computed joint effect variables names provided vector. default, variable_groups = NULL, case variable-importance measures computed separately variables indicated variables argument N numeric, number observations sampled dataset purpose calculation label label model, provides overrides x$label","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_integrated_feature_importance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for model_parts.R — surv_integrated_feature_importance","text":"data.frame containing results calculation.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_integrated_feature_importance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper functions for model_parts.R — surv_integrated_feature_importance","text":"Note: function can run within progressr::with_progress() display progress bar, execution can take long, especially large datasets.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_lime.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for predict_parts.R — surv_lime","title":"Helper functions for predict_parts.R — surv_lime","text":"Helper functions predict_parts.R","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_lime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for predict_parts.R — surv_lime","text":"","code":"surv_lime(   explainer,   new_observation,   ...,   N = 100,   distance_metric = \"euclidean\",   kernel_width = NULL,   sampling_method = \"gaussian\",   sample_around_instance = TRUE,   max_iter = 10000,   categorical_variables = NULL,   k = 1 + 1e-04 )"},{"path":"https://modeloriented.github.io/survex/reference/surv_lime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for predict_parts.R — surv_lime","text":"explainer model explained, preprocessed explain function new_observation new observation predictions need explained ... additional parameters, passed internal functions N positive integer, number observations generated neighbourhood distance_metric character, name distance metric used, \"euclidean\" implemented kernel_width numeric, parameter used calculating weights, default sqrt(ncol(data)*0.75) sampling_method character, name method generating neighbourhood, \"gaussian\" implemented sample_around_instance logical, neighbourhood generated new observation center (default), mean whole dataset used center max_iter numeric, maximal number iteration optimization problem categorical_variables character vector, names variables treated categories (factors included default) k small positive number > 1, added chf taking log, weigths negative","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_lime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for predict_parts.R — surv_lime","text":"list, SurvLIME result $result field.","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_model_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract info from model — surv_model_info","title":"Extract info from model — surv_model_info","text":"generic function let user extract base information model. function returns named list class model_info contain information package model, version task type. wrappers like mlr parsnip , package wrapper information stored","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_model_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract info from model — surv_model_info","text":"","code":"surv_model_info(model, ...)  # S3 method for coxph surv_model_info(model, ...)  # S3 method for rfsrc surv_model_info(model, ...)  # S3 method for ranger surv_model_info(model, ...)  # S3 method for model_fit surv_model_info(model, ...)  # S3 method for cph surv_model_info(model, ...)  # S3 method for LearnerSurv surv_model_info(model, ...)  # S3 method for default surv_model_info(model, ...)"},{"path":"https://modeloriented.github.io/survex/reference/surv_model_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract info from model — surv_model_info","text":"model model object ... another arguments","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_model_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract info from model — surv_model_info","text":"named list class model_info","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_model_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract info from model — surv_model_info","text":"Currently supported packages : class coxph - Cox proportional hazards regression model created survival package class model_fit - models created parsnip package class ranger - random survival forest models created ranger package class rfsrc - random forest models created randomForestSRC package","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_model_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract info from model — surv_model_info","text":"","code":"library(survival) library(survex) cph <- survival::coxph(survival::Surv(time, status) ~ ., data = veteran,                        model = TRUE, x = TRUE, y = TRUE) surv_model_info(cph) #> Package: survival  #> Package version: 3.3.1  #> Task type: survival  # \\donttest{ library(ranger) rsf_ranger <- ranger::ranger(survival::Surv(time, status) ~ ., data = veteran,  num.trees = 50, mtry = 3, max.depth = 5) surv_model_info(rsf_ranger) #> Package: ranger  #> Package version: 0.14.1  #> Task type: survival # }"},{"path":"https://modeloriented.github.io/survex/reference/surv_model_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for model_performance.R — surv_model_performance","title":"Helper functions for model_performance.R — surv_model_performance","text":"Helper functions model_performance.R","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_model_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for model_performance.R — surv_model_performance","text":"","code":"surv_model_performance(explainer, ..., times = NULL, type = \"metrics\")"},{"path":"https://modeloriented.github.io/survex/reference/surv_model_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for model_performance.R — surv_model_performance","text":"explainer model explained, preprocessed explain function ... parameters, currently ignored times numeric vector, time points ROC curves calculated type == \"roc\" metrics calculated type == \"metrics\". Note: type==\"roc\" parameter obligatory type character, either \"metrics\" calculates performance metrics \"roc\" calculates ROC curves specific time points","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_model_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for model_performance.R — surv_model_performance","text":"Either list type == \"metrics\" data.frame type == \"roc\"","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_shap.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for predict_parts.R — surv_shap","title":"Helper functions for predict_parts.R — surv_shap","text":"Helper functions predict_parts.R","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_shap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for predict_parts.R — surv_shap","text":"","code":"surv_shap(   explainer,   new_observation,   ...,   y_true = NULL,   calculation_method = \"kernel\",   aggregation_method = \"integral\",   path = \"average\",   B = 25,   exact = FALSE )"},{"path":"https://modeloriented.github.io/survex/reference/surv_shap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for predict_parts.R — surv_shap","text":"explainer model explained, preprocessed explain function new_observation new observation predictions need explained ... additional parameters, passed internal functions y_true two element numeric vector matrix one row two columns, first element true observed time second status observation, used plotting calculation_method character, \"kernel\" implemented now. aggregation_method character, either \"mean_absolute\" \"integral\", \"max_absolute\", \"sum_of_squares\" path ignored, placeholder implemented \"sampling\" method B ignored, placeholder implemented \"sampling\" method exact ignored, placeholder implemented \"sampling\" method","code":""},{"path":"https://modeloriented.github.io/survex/reference/surv_shap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for predict_parts.R — surv_shap","text":"list, containing calculated SurvSHAP results $result field","code":""},{"path":"https://modeloriented.github.io/survex/reference/survival_to_cumulative_hazard.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Survival to Cumulative Hazard — survival_to_cumulative_hazard","title":"Transform Survival to Cumulative Hazard — survival_to_cumulative_hazard","text":"Helper function transform survival function CHF","code":""},{"path":"https://modeloriented.github.io/survex/reference/survival_to_cumulative_hazard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Survival to Cumulative Hazard — survival_to_cumulative_hazard","text":"","code":"survival_to_cumulative_hazard(survival_functions, epsilon = 0)"},{"path":"https://modeloriented.github.io/survex/reference/survival_to_cumulative_hazard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Survival to Cumulative Hazard — survival_to_cumulative_hazard","text":"survival_functions matrix vector, row representing survival function epsilon positive numeric number add, logarithm can taken","code":""},{"path":"https://modeloriented.github.io/survex/reference/survival_to_cumulative_hazard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Survival to Cumulative Hazard — survival_to_cumulative_hazard","text":"matrix vector transformed form cumulative hazard function.","code":""},{"path":"https://modeloriented.github.io/survex/reference/survival_to_cumulative_hazard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Survival to Cumulative Hazard — survival_to_cumulative_hazard","text":"","code":"library(survex)  vec <- c(1, 0.9, 0.8, 0.7, 0.6) matr <- matrix(c(1, 0.9, 0.8, 1, 0.8, 0.6), ncol = 3)  survival_to_cumulative_hazard(vec) #> [1] 0.0000000 0.1053605 0.2231436 0.3566749 0.5108256  survival_to_cumulative_hazard(matr) #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 0.2231436 0.2231436 #> [2,] 0.1053605 0.0000000 0.5108256"},{"path":"https://modeloriented.github.io/survex/reference/transform_to_stepfunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Fixed Point Prediction into a Stepfunction — transform_to_stepfunction","title":"Transform Fixed Point Prediction into a Stepfunction — transform_to_stepfunction","text":"models return survival funciton cumulative hazard function prediction times events present training data set. convenient utility allow prediction evaluated time.","code":""},{"path":"https://modeloriented.github.io/survex/reference/transform_to_stepfunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Fixed Point Prediction into a Stepfunction — transform_to_stepfunction","text":"","code":"transform_to_stepfunction(   predict_function,   eval_times = NULL,   ...,   type = NULL,   prediction_element = NULL,   times_element = NULL )"},{"path":"https://modeloriented.github.io/survex/reference/transform_to_stepfunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Fixed Point Prediction into a Stepfunction — transform_to_stepfunction","text":"predict_function function making prediction based model newdata arguments, ... parameter also passed function. return either numeric vector length eval_times, matrix number columns number rows nrow(newdata). can also return list, one elements containing object. eval_times numeric vector times, fixed predictions made. can NULL, predict_function returns list contains vector. ... parameters passed predict_function type type function returned, either \"survival\", \"chf\" NULL chooses value step function first prediction time. \"survival\" 1, \"chf\" 0, otherwise, value prediction first time numerical order. prediction_element predict_function returns list matrix one elements, parameter contain name element times_element predict_function returns list matrix one elements, parameter contain name element","code":""},{"path":"https://modeloriented.github.io/survex/reference/transform_to_stepfunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Fixed Point Prediction into a Stepfunction — transform_to_stepfunction","text":"function returns function three arguments, (model, newdata, times), ready supply explainer.","code":""},{"path":"https://modeloriented.github.io/survex/reference/transform_to_stepfunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Fixed Point Prediction into a Stepfunction — transform_to_stepfunction","text":"","code":"library(survex) library(survival)  rsf_src <- randomForestSRC::rfsrc(Surv(time, status) ~ ., data = veteran)  chf_function <- transform_to_stepfunction(predict,                                           type = \"chf\",                                           prediction_element = \"chf\",                                           times_element = \"time.interest\")  explainer <- explain(rsf_src, predict_cumulative_hazard_function = chf_function) #> Preparation of a new explainer is initiated  #>   -> model label       :  rfsrc (  default  )  #>   -> data              :  137  rows  6  cols (  extracted from the model  )  #>   -> target variable   :  137  values ( 128 events and 9 censored ) (  extracted from the model  )  #>   -> times             :  94 unique time points , min = 1 , mean = 119.9706 , max = 845.56  #>   -> times             :  (  generated from y with method quantiles  )  #>   -> predict function  :  sum over the predict_cumulative_hazard_function will be used (  default  )  #>   -> predict survival function  :  stepfun based on predict.rfsrc()$survival will be used (  default  )  #>   -> predict cumulative hazard function  :  chf_function  #>   -> model_info        :  package randomForestSRC , ver. 3.1.1 , task survival (  default  )  #>   A new explainer has been created!"},{"path":"https://modeloriented.github.io/survex/news/index.html","id":"survex-011","dir":"Changelog","previous_headings":"","what":"survex 0.1.1","title":"survex 0.1.1","text":"CRAN release: 2022-09-05 survex package now public model_parts, model_profile, predict_parts, predict_profile explanations implemented C/D AUC, Brier score (Harrell’s) concordance index performance measures implemented Explain methods survival, ranger, randomForestSRC, censored mlr3proba packages.","code":""}]
